#+TITLE: Emacs configuration file
#+AUTHOR: Vasiliy Yorkin
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Credits

Inspired by [[https://github.com/freetonik/emacs-dotfiles][freetonik's]] setup.

* Warning

This config is not intended to be used by anyone other than me.

* Setup

- Symlink =init.org= to =~/.emacs.d/init.org=
- Symlink =init.el= to =~/.emacs.d/init.el=

#+BEGIN_SRC sh :tangle no
ln -sf $(pwd)/init.org ~/.emacs.d/init.org
ln -sf $(pwd)/init.el ~/.emacs.d/init.el
#+END_SRC

On the first run Emacs will install some packages. It's best to restart Emacs after that process is done for the first time.

There is no reason to track the =init.el= that is generated; by running the following command =git= will not bother tracking it:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of =init.el= start tracking again with:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC

When this configuration is loaded for the first time, the =init.el= is the file that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; tangle it
(org-babel-tangle)
;; load it
(load-file (concat user-emacs-directory "init.el"))
;; finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

* Config

[[https://www.emacswiki.org/emacs/LexicalBinding][Lexical binding]] for the init-file is needed, it can be specified in the header.
This is the first line of the actual configuration.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

Tangle and compile this file on save automatically:

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (file-truename (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

** Use package

Initialize package and add package archives.

#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC

Set ~package-enable-at-startup~ to ~nil~ for slightly faster startup.
See [[https://www.reddit.com/r/emacs/comments/1rdstn/set_packageenableatstartup_to_nil_for_slightly/][this post on Reddit]].

#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
    (proto (if no-ssl "http" "https")))
    ;; Comment/uncomment these two lines to disable/enable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;; (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
#+END_SRC

It is ok to use both ~package-initialize~ and ~use-package~ for a well behaved
package: ~package-initialize~ will not load the whole package, but only autoload
functions selected by the package author.

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Install =use-package=.

Install missing packages automatically if not already present on the system and
be less verbose.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))

(setq
 use-package-always-ensure t
 use-package-verbose nil)
#+END_SRC

Statistics gathering. Run the ~M-x use-package-report~ command to see the
results. Read the [[https://github.com/jwiegley/use-package#gathering-statistics][docs]] for more info.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package-compute-statistics)
#+END_SRC

Pass system shell environment to Emacs. This is important primarily for shell
inside Emacs, but also things like Org mode export to Tex PDF don't work, since
it relies on running external command =pdflatex=, which is loaded from =PATH=.
Also this is required for [[https://github.com/jwiegley/use-package#use-package-ensure-system-package][use-package-ensure-system-package]] extension.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
 :commands
 (exec-path-from-shell-copy-envs
  exec-path-from-shell-initialize)
 :init
 (setq exec-path-from-shell-check-startup-files nil)
 :config
 (exec-path-from-shell-copy-envs '("WAKATIME_API_KEY"))
 (when (memq window-system '(mac ns x))
   (exec-path-from-shell-initialize)))
#+END_SRC

Ensure system binaries exist alongside package declarations. It uses the
[[https://gitlab.com/jabranham/system-packages][system-packages]] to make handling installed system packages more convenient
(supports =nix= and many other operating systems).

#+BEGIN_SRC emacs-lisp
(use-package system-packages)
(use-package use-package-ensure-system-package)
#+END_SRC

** Warnings

Decrease the =obsolete= warnings annoyance level.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not obsolete))
#+END_SRC

This helps to get rid of =functions might not be defined at runtime= warnings.
See [[https://github.com/jwiegley/use-package/issues/590][this issue]] for details.

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (setq use-package-expand-minimally byte-compile-current-file))
#+END_SRC

Suppress ~ad-handle-definition~ warnings.

#+BEGIN_SRC emacs-lisp
(setq ad-redefinition-action 'accept)
#+END_SRC

** Defaults
*** Backups & lock files

Don't create lock files.

#+BEGIN_SRC emacs-lisp
(setq create-lockfiles nil)
#+END_SRC

I don't care about auto save and backup files.
Also I don't like distracting alarms.

#+BEGIN_SRC emacs-lisp
(setq
 make-backup-files nil        ; disable backup files
 auto-save-list-file-name nil ; disable .saves files
 auto-save-default nil        ; disable auto saving
 ring-bell-function 'ignore)  ; turn off alarms completely
#+END_SRC

*** Misc

Use =y/n= instead of =yes/no=.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Don't prompt for non existent name when creating new buffers.

#+BEGIN_SRC emacs-lisp
(setq-default confirm-nonexistent-file-or-buffer t)
#+END_SRC

Enable =recentf-mode= and remember a lot of files.

#+BEGIN_SRC emacs-lisp
(setq
 recentf-auto-cleanup 'never
 recentf-max-menu-items 0
 recentf-max-saved-items 300
 recentf-filename-handlers '(file-truename abbreviate-file-name))

(recentf-mode 1)
#+END_SRC

Automatically save place in each file.

#+BEGIN_SRC emacs-lisp
(setq
 save-place-forget-unreadable-files t
 save-place-limit 200)

(save-place-mode 1)
#+END_SRC

** Location

Set the location name and coordinates.

#+BEGIN_SRC emacs-lisp
(setq
 calendar-location-name "Moscow, RU"
 calendar-latitude 55.84
 calendar-longitude 37.34)
#+END_SRC

** Core
*** Utils

Utility functions.

#+BEGIN_SRC emacs-lisp
(defun my/emacs-path (path)
  "Expands `path` with Emacs home directory."
  (expand-file-name path user-emacs-directory))

(defun my/tmp-path (path)
  "Expand `path` with Emacs temporary directory."
  (my/emacs-path (format "tmp/%s" path)))

(defun my/lisp-path (path)
  "Expand `path` with Emacs `/lisp` directory."
  (my/emacs-path (format "lisp/%s" path)))
#+END_SRC

*** Builtin
**** Files

On save/write file:
- Automatically delete trailing whitespace.
- Silently put a newline at the end of file if there isn't already one there.

#+BEGIN_SRC emacs-lisp
(use-package files
 :ensure nil
 :commands
 (generate-new-buffer
  executable-find
  file-name-base
  file-name-extension)
 :custom
 (require-final-newline t)
 :hook
 (before-save . delete-trailing-whitespace))
#+END_SRC

**** Reverting

Diminish [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Autorevert.html#Autorevert][autorevert]] mode.

#+BEGIN_SRC emacs-lisp
(use-package autorevert
 :ensure nil
 :custom
 ;; Don't generate any messages whenever a buffer is reverted
 (auto-revert-verbose nil)
 ;; Operate only on file-visiting buffers
 (global-auto-revert-non-file-buffers t)
 :diminish auto-revert-mode)
#+END_SRC

**** Uniquify

The =forward= buffer name style includes part of the file's directory
name at the beginning of the buffer name. Using this method, buffers
visiting the files =/u/rms/tmp/Makefile= and
=/usr/projects/zaphod/Makefile= would be named =‘tmp/Makefile’= and
=‘zaphod/Makefile’=.

#+BEGIN_SRC emacs-lisp
(use-package uniquify
 :ensure nil
 :custom
 ;; use "foo/bar/qux"
 (uniquify-buffer-name-style 'forward))
#+END_SRC

**** Frame

- Disable blinking cursor.
- Disable suspending on =C-z=.

#+BEGIN_SRC emacs-lisp
(use-package frame
 :ensure nil
 :config
 (blink-cursor-mode 0)
 :bind
 ("C-z" . nil))
#+END_SRC

**** Delsel

=C-c C-g= always quits minibuffer.

#+BEGIN_SRC emacs-lisp
(use-package delsel
 :ensure nil
 :bind
 ("C-c C-g" . minibuffer-keyboard-quit))
#+END_SRC

**** Simple

#+BEGIN_SRC emacs-lisp
(use-package simple
 :ensure nil
 :diminish
 ((visual-line-mode . " ↩")
  (auto-fill-function . " ↵"))
 :bind
 ;; remap ctrl-w/ctrl-h
 (("C-c h" . help-command)
  ("C-x C-k" . kill-region)
  ("C-h" . delete-backward-char)))
#+END_SRC

**** Pixel scroll

Global minor mode which makes mouse-wheel scroll a line smoothly.

#+BEGIN_SRC emacs-lisp
(use-package pixel-scroll
 :ensure nil
 :commands
 (pixel-scroll-mode)
 :config
 (pixel-scroll-mode 1))
#+END_SRC

**** Prog mode

#+BEGIN_SRC emacs-lisp
(use-package prog-mode
 :ensure nil
 :commands
 (global-prettify-symbols-mode)
 :init
 (setq prettify-symbols-unprettify-at-point 'right-edge)
 :config
 ;; convert certain words into symbols, e.g. lambda becomes λ.
 (global-prettify-symbols-mode t))
#+END_SRC

**** IBuffer

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
 :ensure nil
 :bind
 ([remap list-buffers] . ibuffer))
#+END_SRC

**** Mule

#+BEGIN_SRC emacs-lisp
(use-package mule
 :commands
 (set-terminal-coding-system)
 :ensure nil
 :config
 (prefer-coding-system 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-language-environment "UTF-8"))
#+END_SRC

**** ETags

Setup [[https://www.emacswiki.org/emacs/EmacsTags][Emacs tags]].

#+BEGIN_SRC emacs-lisp
(use-package etags
 :ensure nil
 :custom
 ;; Reread a TAGS table without querying, if it has changed
 (tag-revert-without-query 1)
 ;; Don't add a new tags to the current list.
 ;; Always start a new list.
 (tags-add-tables nil))
#+END_SRC

**** Man

#+BEGIN_SRC emacs-lisp
(use-package man
 :ensure nil
 :custom-face
 (Man-overstrike ((t (:inherit font-lock-type-face :bold t))))
 (Man-underline ((t (:inherit font-lock-keyword-face :underline t)))))
#+END_SRC

**** Calendar

#+BEGIN_SRC emacs-lisp
(use-package calendar
 :ensure nil
 :custom
 (calendar-week-start-day 1))
#+END_SRC

**** Face remap

#+BEGIN_SRC emacs-lisp
(use-package face-remap
 :commands
 (buffer-face-mode-face
  face-remap-add-relative
  buffer-face-mode)
 :ensure nil
 :diminish buffer-face-mode)
#+END_SRC

** UI
*** Basics.

#+BEGIN_SRC emacs-lisp
(setq
 inhibit-startup-screen t ; Don't show splash screen
 use-dialog-box nil       ; Disable dialog boxes
 use-file-dialog nil)     ; Disable file dialog
#+END_SRC

*** Scroll

#+BEGIN_SRC emacs-lisp
(setq
 scroll-margin 0
 scroll-conservatively 0
 scroll-preserve-screen-position nil
 scroll-step 1)
#+END_SRC

*** UI elements

Hide toolbar and scrollbars.

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))
#+END_SRC

I generally prefer to hide the menu bar, but doing this on OS X simply makes it
update unreliably in GUI frames, so we make an exception.

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'darwin)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (set-frame-parameter frame 'menu-bar-lines
                                     (if (display-graphic-p frame) 1 0))))
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1)))
#+END_SRC

Disable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Bidirectional-Display.html][bidirectional text]] for tiny performance boost.

#+BEGIN_SRC emacs-lisp
(setq-default bidi-display-reordering nil)
#+END_SRC

Don't [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Blinking.html][blink matching paren]], it's too distracting.

#+BEGIN_SRC emacs-lisp
(setq-default blink-matching-paren nil)
#+END_SRC

*** Cursor

Hide cursor in inactive windows.

#+BEGIN_SRC emacs-lisp
(setq-default cursor-in-non-selected-windows nil)
#+END_SRC

- Display vertical bar cursor with default width.
- Draw block cursor as wide as the glyph under it.

#+BEGIN_SRC emacs-lisp
(setq-default
 cursor-type 'bar
 x-stretch-cursor t)
#+END_SRC

Show full path in the title bar.

#+BEGIN_SRC emacs-lisp
(setq-default frame-title-format "%b (%f)")
#+END_SRC

Don't implicitly resize the frame's display area in order to preserve the number of columns or lines the frame displays when changing font, menu bar, tool bar, internal borders, fringes or scroll bars.
Read [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Implied-Frame-Resizing.html][this]] for more info.

#+BEGIN_SRC emacs-lisp
(setq-default frame-inhibit-implied-resize t)
#+END_SRC

*** Fringe

Set fringe size.

#+BEGIN_SRC emacs-lisp
(fringe-mode '(12 . 12))
#+END_SRC

Remove continuation arrow on right fringe.

#+BEGIN_SRC emacs-lisp
(setq-default
 fringe-indicator-alist
 (delq (assq 'continuation fringe-indicator-alist) fringe-indicator-alist))
#+END_SRC

*** Window-divider

Hide the =window-divider= (a line separating windows).

#+BEGIN_SRC emacs-lisp
(when (boundp 'window-divider-mode)
  (setq window-divider-default-places t
        window-divider-default-bottom-width 0
        window-divider-default-right-width 0)
  (window-divider-mode +1))
#+END_SRC

*** Line-spacing

Non-zero values for =line-spacing= can mess up ansi-term and co, so we
zero it explicitly in those cases.

#+BEGIN_SRC emacs-lisp
(add-hook
 'term-mode-hook
 (lambda () (setq line-spacing 0)))
#+END_SRC

Highlight parens.

#+BEGIN_SRC emacs-lisp
(setq show-paren-style 'parenthesis)
(show-paren-mode 1)
#+END_SRC

Treat an Emacs region much like a typical text selection outside of Emacs.

#+BEGIN_SRC emacs-lisp
(setq delete-selection-mode t)
#+END_SRC

Set left and right margins for every window.

#+BEGIN_SRC emacs-lisp
(setq-default
 left-margin-width 2
 right-margin-width 2)
#+END_SRC

*** Startup

Start maximized.

#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC

*** Mode-line

Turn-off tooltips on cursor hover-over.

#+BEGIN_SRC emacs-lisp
(setq mode-line-default-help-echo nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq
 mode-line-position
 '((line-number-mode ("%l" (column-number-mode ":%c")))))
#+END_SRC

*** Time

#+BEGIN_SRC emacs-lisp
(use-package time
 :ensure nil
 :custom
 (display-time-default-load-average nil)
 (display-time-24hr-format t)
 :config
 (display-time-mode t))
#+END_SRC

** Editor
*** Customizations

I don't use the customizations UI. Lets keep those automated
customizations in a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][separate file]]. The ~'noerror~ argument passed to
load prevents errors if the file doesn’t exist.

#+BEGIN_SRC emacs-lisp
(setq custom-file (my/emacs-path "custom.el"))
(load custom-file 'noerror)
#+END_SRC

*** Basics

Some basic things.

#+BEGIN_SRC emacs-lisp
(setq
 sentence-end-double-space nil  ; sentences should end in one space
 initial-scratch-message nil    ; empty scratch buffer
 enable-recursive-minibuffers t ; allow minibuffer commands in the minibuffer
 echo-keystrokes 0.1            ; show keystrokes right away, don't show the message in the scratch buffer
 ns-use-native-fullscreen nil   ; disable native fullscreen support
)
#+END_SRC

*** Tabs & spaces

- Use spaces instead of tabs everywhere.
- One tab is 2 spaces.

#+BEGIN_SRC emacs-lisp
(setq-default
 indent-tabs-mode nil
 tab-width 2)
#+END_SRC

Display line and column numbers in the mode-line.

#+BEGIN_SRC emacs-lisp
(setq
  line-number-mode t
  column-number-mode t)
#+END_SRC

*** Line wrapping

Long lines will show a continuation character in the right margin at the
window’s edge to indicate that one can scroll to see the rest.

#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines t)
#+END_SRC

Break line at 80 characters.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

Enable automatic line breaking for all text mode buffers.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC

Always wrap lines.

#+BEGIN_SRC emacs-lisp :tangle no
;; (global-visual-line-mode)
#+END_SRC

** Benchmarking

Usage: ~M-x benchmark-init/show-durations-tabulated~ or ~M-x
benchmark-init/show-durations-tree~

#+BEGIN_SRC emacs-lisp
(use-package benchmark-init
 :hook
 ;; To disable collection of benchmark data after init is done.
 (after-init . benchmark-init/deactivate))
#+END_SRC

** Quelpa

Setup [[https://framagit.org/steckerhalter/quelpa][quelpa]].

#+BEGIN_SRC emacs-lisp
(if (require 'quelpa nil t)
  ;; Prevent quelpa from doing anyting that requires network connection.
  (setq
   quelpa-update-melpa-p nil    ; Don't update MELPA git repo
   quelpa-checkout-melpa-p nil  ; Don't clone MELPA git repo
   quelpa-upgrade-p nil         ; Don't try to update packages automatically
   quelpa-self-upgrade-p nil)   ; Don't upgrade quelpa automatically

  ;; Comment/uncomment line below to disable/enable quelpa auto-upgrade.
  ;; (quelpa-self-upgrade)

  (with-temp-buffer
    (url-insert-file-contents "https://raw.github.com/quelpa/quelpa/master/bootstrap.el")
    (eval-buffer)))
#+END_SRC

Install =use-package= and the =quelpa= handler.

#+BEGIN_SRC emacs-lisp
(quelpa
 '(quelpa-use-package
   :fetcher github
   :repo "quelpa/quelpa-use-package"))
(require 'quelpa-use-package)
#+END_SRC

Advice setting ~:ensure nil~ for =use-package= + =quelpa=.

#+BEGIN_SRC emacs-lisp
(quelpa-use-package-activate-advice)
#+END_SRC

** Font
*** Faces

#+BEGIN_SRC emacs-lisp
(use-package faces
  :ensure nil
  :custom
  (face-font-family-alternatives
   '(("Hack" "Consolas" "Monaco" "Monospace")))
  :init
  (set-face-attribute
   'default nil
   :family (caar face-font-family-alternatives)
   :weight 'regular
   :height 120
   :width 'semi-condensed)
  (set-fontset-font
   "fontset-default"
   'cyrillic
   (font-spec :registry "iso10646-1" :script 'cyrillic)))
#+END_SRC

** Theme

Base-16 themes.

#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :config
  ;; (load-theme 'base16-chalk t)
  (load-theme 'base16-black-metal t)
  ;; (load-theme 'base16-default-dark t)
  ;; (load-theme 'base16-grayscale-dark t)
  ;; (load-theme 'base16-grayscale-light t)
  ;; (load-theme 'base16-one-light t)
  ;; (load-theme 'base16-gruvbox-light-hard t)
  ;; (load-theme 'base16-material-palenight t) ;; ****
  ;; (load-theme 'base16-rebecca t)
  ;; (load-theme 'base16-pop t)
  ;; (load-theme 'base16-tomorrow-night t)
  ;; (load-theme 'base16-twilight t)
  ;; (load-theme 'base16-irblack t)
  )
#+END_SRC

Doom themes.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package doom-themes
  :init
  (setq
   doom-themes-enable-bold nil
   doom-themes-enable-italic nil)
  :config
  (load-theme 'doom-dracula t)
  (load-theme 'doom-challenger-deep t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  (doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification
  (doom-themes-org-config))
#+END_SRC

Other themes.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package dracula-theme :defer t)
(use-package gotham-theme :defer t)
(use-package sublime-themes :defer t)
(use-package color-theme-modern :defer t)
(use-package twilight-theme :defer t)
(use-package gruber-darker-theme :defer t)
(use-package monokai-theme :defer t)
(use-package faff-theme :defer t)
(use-package badwolf-theme :defer t)
(use-package boron-theme :defer t)
(use-package bliss-theme :defer t)
(use-package busybee-theme :defer t)
(use-package color-theme-sanityinc-tomorrow :defer t)
(use-package badger-theme :defer t)
(use-package atom-one-dark-theme :defer t)
(use-package zenburn-theme :defer t)
(use-package hemisu-theme :defer t)
(use-package paganini-theme :defer t)
(use-package yoshi-theme :defer t)
(use-package rebecca-theme :defer t) ;; *****
(use-package moe-theme :defer t)
(use-package arjen-grey-theme :defer t)
(use-package darkmine-theme :defer t)
(use-package flatland-theme :defer t)
(use-package tao-theme :defer t)
(use-package liso-theme :defer t)
(use-package jazz-theme :defer t)
(use-package material-theme :defer t)
(use-package challenger-deep-theme :defer t) ;; ***
(use-package ample-theme
  :disabled
  :init
  (progn
    (load-theme 'ample t t)
    (load-theme 'ample-flat t t)
    (load-theme 'ample-light t t)
    (enable-theme 'ample-flat))
  :defer t)
(use-package cyberpunk-theme :defer t)
(use-package phoenix-dark-mono-theme :defer t) ;; *** (like grayscale-dark)
(use-package phoenix-dark-pink-theme :defer t) ;; **
(use-package cyberpunk-theme :defer t)
(use-package blackboard-theme :defer t) ;; ***
(use-package mustard-theme :defer t) ;; ****
(use-package labburn-theme :defer t) ;; *****
(use-package green-phosphor-theme :defer t) ;; *****
(use-package exotica-theme :defer t) ;; **
(use-package lush-theme :defer t) ;; ****
#+END_SRC

Sunrise/sunset [[https://github.com/hadronzoo/theme-changer][theme changer]]. Given a location and day/night color themes, this
file provides a change-theme function that selects the appropriate theme based
on whether it is day or night. It will continue to change themes at sunrise and
sunset.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package theme-changer
  :config
  (change-theme 'base16-gruvbox-light-hard 'labburn))
#+END_SRC

** Key bindings

#+BEGIN_SRC emacs-lisp
(defvar my/leader "SPC")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package general
 :config
 (general-define-key
  "C-h" 'windmove-left
  "C-l" 'windmove-right
  "C-k" 'windmove-up
  "C-j" 'windmove-down
  "C-c C-k" 'kill-region)
 (when (eq system-type 'darwin)
   (general-define-key
    "s-<backspace>" 'kill-whole-line
    "M-S-<backspace>" 'kill-word
    ;; Use Super for movement and selection just like in macOS
    "s-<right>" (kbd "C-e")
    "S-s-<right>" (kbd "C-S-e")
    "s-<left>" (kbd "M-m")
    "S-s-<left>" (kbd "M-S-m")
    "s-<up>" 'beginning-of-buffer
    "s-<down>" 'end-of-buffer
    ;; Basic things you should expect from macOS
    "s-a" 'mark-whole-buffer       ; select all
    "s-s" 'save-buffer             ; save
    "s-S" 'write-file              ; save as
    "s-q" 'save-buffers-kill-emacs ; quit
    ;; Go to other windows easily with one keystroke
    ;; s-something instead of C-x something
    "s-o" (kbd "C-x o")
    "s-w" (kbd "C-x 0") ; just like close tab in a web browser
    "s-W" (kbd "C-x 1") ; close others with shift
    ;; Move between windows with Control-Command-Arrow and
    ;; with Cmd just like in iTerm
    "s-[" 'windmove-left   ; Cmd+[ go to left window
    "s-]" 'windmove-right  ; Cmd+] go to right window
    "s-{" 'windmove-up     ; Cmd+Shift+[ go to upper window
    "<s-}>" 'windmove-down ; Ctrl+Shift+[ go to down window
    ;; Prev/next buffer
    "s-<" 'previous-buffer
    "s->" 'next-buffer))
 (general-evil-setup t)
 (nmap
   ;; Swap : and ; to make colon commands
   ;; easier to type in Emacs
   ";" 'evil-ex
   ":" 'evil-repeat-find-char)
 (nmap 'messages-buffer-mode-map
   "0" 'evil-digit-argument-or-evil-beginning-of-line)
 ;; Process menu
 (nmap 'process-menu-mode-map
   "M-d" 'process-menu-delete-process
   "q" 'kill-buffer-and-window)
 (nmap
   :prefix my/leader
   "RET" 'toggle-frame-fullscreen
   "v" 'split-window-horizontally
   "s" 'split-window-vertically
   "p" 'list-processes
   "P s" 'profiler-start
   "P S" 'profiler-stop
   "P r" 'profiler-report
   "E e" 'eval-expression
   "E l" 'eval-last-sexp
   "h k" 'describe-key-briefly
   "h K" 'describe-key
   "h M" 'describe-mode
   "h m" 'info-display-manual))
#+END_SRC

** Behavior
*** Trashing

#+BEGIN_SRC emacs-lisp
(setq
  delete-by-moving-to-trash t
  trash-directory (my/emacs-path "trash"))
#+END_SRC

*** Automatic updates

Automatically update Emacs packages. Useful if you're working in multiple
machines and tend to forget to manually update packages from time to time.

The main idea is that you set a desired periodicity for the updates, and when
you start Emacs, the packages will be automatically updated if enough days have
passed since the last update.

See the [[https://github.com/rranelli/auto-package-update.el][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
 :config
 (setq
  auto-package-update-delete-old-versions t ; Delete residual old version directory when updating
  auto-package-update-interval 10)          ; Update packages every 10 days
 (auto-package-update-maybe)                ; Check for updates on startup
 (auto-package-update-at-time "05:30"))     ; Update at =5:30=
#+END_SRC

*** Clipboard

Make emacs kill ring and system clipboard independent.
Currenly untangled.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package simpleclip
 :disabled
 :after general
 :config
 (simpleclip-mode 1)
 (nmap
   "s-c" 'simpleclip-copy
   "s-v" 'simpleclip-paste)
 (imap
   "s-c" 'simpleclip-copy
   "s-v" 'simpleclip-paste))
#+END_SRC

*** Copy as

Allows to copy buffer locations as GitHub/Slack/JIRA/HipChat/... formatted code.

#+BEGIN_SRC emacs-lisp
(use-package copy-as-format
 :after general
 :config
 (vmap
   :prefix "C-c f"
   "f" 'copy-as-format
   "a" 'copy-as-format-asciidoc
   "b" 'copy-as-format-bitbucket
   "d" 'copy-as-format-disqus
   "g" 'copy-as-format-github
   "l" 'copy-as-format-gitlab
   "h" 'copy-as-format-html
   "j" 'copy-as-format-jira
   "m" 'copy-as-format-markdown
   "w" 'copy-as-format-mediawiki
   "o" 'copy-as-format-org-mode
   "p" 'copy-as-format-pod
   "r" 'copy-as-format-rst
   "s" 'copy-as-format-slack))
#+END_SRC

*** Extra whitespace trimming

Unobtrusively trim extraneous whitespace only in lines edited.

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
 :config
 (ws-butler-global-mode)
 :diminish ws-butler-mode)
#+END_SRC

*** Aggressive indent

Emacs minor mode that keeps your code always indented. More reliable than
=electric-indent-mode=. More info in the [[https://github.com/Malabarba/aggressive-indent-mode][package repository.]]

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
 :hook
 ((emacs-lisp-mode css-mode c++-mode) . aggressive-indent-mode)
 :config
 ;; Prevent lines jumping around in c++-mode when you haven't typed the ";" yet
 (add-to-list
  'aggressive-indent-dont-indent-if
  '(and
    (derived-mode-p 'c++-mode)
    (null (string-match
           "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
           (thing-at-point 'line))))))
#+END_SRC

*** Auto-save buffers

Save buffers when they lose focus.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package super-save
 :config
 (super-save-mode +1)
 :diminish)
#+END_SRC

*** Zoom

~text-scale-increase~ and ~text-scale-decrease~ doesn't play well with
=company-mode= (suggestions popup alignment issue)
more info: https://github.com/company-mode/company-mode/issues/299#issuecomment-115056397

=frame-fns= and =frame-cmds= are dependencies of =zoom-frm=.

#+BEGIN_SRC emacs-lisp
(use-package frame-fns
 :demand t
 :quelpa (frame-fns :fetcher github :repo "emacsmirror/frame-fns"))
(use-package frame-cmds
 :demand t
 :quelpa (frame-cmds :fetcher github :repo "emacsmirror/frame-cmds"))

(use-package zoom-frm
 :after (frame-fns frame-cmds)
 :quelpa (zoom-frm :fetcher github :repo "emacsmirror/zoom-frm")
 :config
 (nmap
   "C-=" 'zoom-frm-in
   "C--" 'zoom-frm-out
   "<s-triple-wheel-up>" 'zoom-frm-in
   "<s-triple-wheel-down>" 'zoom-frm-out))
#+END_SRC

*** Transparency

Allows easily change Emacs transparency.
See the [[https://github.com/Benaiah/seethru][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package seethru
 :demand t
 :commands
 (seethru)
 :config
 (seethru 100)
 ;; C-c 8, C-c 9
 (seethru-recommended-keybinds))
#+END_SRC

*** Go to last change

Goto last change in current buffer.

#+BEGIN_SRC emacs-lisp
(use-package goto-chg
 :after general
 :config
 (nmap
   :prefix my/leader
   "." 'goto-last-change
   "," 'goto-last-change-reverse)
 ;; additional keybindings for macOS
 (when (eq system-type 'darwin)
   (nmap
     "s-." 'goto-last-change
     "s-," 'goto-last-change-reverse)))
#+END_SRC

*** Fullframe

Makes it possible to advice commands to execute fullscreen, restoring the window
setup when exiting.

#+BEGIN_SRC emacs-lisp
(use-package fullframe
 :config
 (fullframe list-packages quit-window)
 (fullframe package-list-packages quit-window))
#+END_SRC

*** Folding

Vim-like [[https://github.com/mrkkrp/vimish-fold][text folding]] for Emacs.

#+BEGIN_SRC emacs-lisp
(use-package vimish-fold
 :after evil
 :commands
 (vimish-fold-global-mode)
 :init
 (setq
  vimish-fold-blank-fold-header "<...>"
  vimish-fold-indication-mode 'right-fringe)
 :config
 (custom-set-faces
  '(vimish-fold-mouse-face ((t (:box (:line-width 1 :color "#555")))))
  '(vimish-fold-overlay ((t (:box (:line-width 1 :color "#222"))))))
 (vimish-fold-global-mode 1))
#+END_SRC

*** Which key

Key bindings are provided by =evil-collection=.

#+BEGIN_SRC emacs-lisp
(use-package which-key
 :diminish which-key-mode
 :init
 (setq
  which-key-idle-delay 0.5
  which-key-sort-order 'which-key-prefix-then-key-order-reverse
  ;; hack to make this work with Evil
  which-key-show-operator-state-maps t
  which-key-prefix-prefix ""
  which-key-side-window-max-width 0.5
  which-key-popup-type 'side-window
  which-key-side-window-location 'bottom)
 :config
 (which-key-mode)
 (with-eval-after-load 'evil-collection
   (add-to-list 'evil-collection-mode-list 'while-key)))
#+END_SRC

*** Free keys

Show free bindings in current buffer. To use, call the command =M-x free-keys=.
See the [[https://github.com/Fuco1/free-keys][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package free-keys)
#+END_SRC

*** Sudo edit

Utilities for opening files with sudo.

#+BEGIN_SRC emacs-lisp
(use-package sudo-edit)
#+END_SRC

*** Try

Allows you to try out Emacs packages without installing them.

#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

*** Restart

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
 :after general
 :demand t
 :config
 (nmap
   :prefix my/leader
   "Z" 'restart-emacs))
#+END_SRC

** Appearance
*** Customization

Define an interactive function for customizing appearance.

#+BEGIN_SRC emacs-lisp
(defun my/customize-appearance ()
  (interactive)
  ;; set the background or vertical border to the main area background color
  (set-face-background 'vertical-border (face-background 'default))
  ;; set the foreground and background of the vertical-border face to
  ;; the same value so there is no line up the middle
  (set-face-foreground 'vertical-border (face-background 'vertical-border))
  ;; set the fringe colors to whatever is the background color
  (set-face-attribute
   'fringe nil
   :foreground (face-foreground 'default)
   :background (face-background 'default))
  ;; set the highlight color for selected text
  (set-face-attribute 'region nil :foreground "#fff")
  (set-face-attribute 'region nil :background "#282828")
  ;; set the highlight color and foreground color for matching search results
  (set-face-attribute 'lazy-highlight nil :foreground "black" :background "#ffd700"))
#+END_SRC

Required for =emacsclient=.

#+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
    (my/customize-appearance)
  (add-hook
   'after-make-frame-functions
   (lambda (frame)
     (when (display-graphic-p frame)
       (with-selected-frame frame
         (my/customize-appearance))))))
#+END_SRC

*** Page break lines

Display ugly =^L= page breaks as tidy horizontal lines.

#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
 :init
 (global-page-break-lines-mode 1)
 :diminish page-break-lines-mode)
#+END_SRC

*** Rainbow delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
 :hook
 (prog-mode . rainbow-delimiters-mode)
 :diminish rainbow-delimiters-mode)
#+END_SRC

*** Rainbow identifiers

#+BEGIN_SRC emacs-lisp
(use-package rainbow-identifiers
 :hook
 (prog-mode . rainbow-identifiers-mode)
 :diminish rainbow-identifiers-mode)
#+END_SRC

*** Rainbow mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
 :diminish rainbow-mode
 :hook prog-mode)
#+END_SRC

*** Idle highlight mode

Basically its the same as highlight-thing but seems to be smarter and less
distracting.

#+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
 :custom
 (idle-highlight-idle-time 0.2)
 :hook
 (prog-mode . idle-highlight-mode)
 :config
 ;; (set-face-background 'idle-highlight "#c51060")
 (set-face-foreground 'idle-highlight "#999")
 (set-face-background 'idle-highlight "#222")
 (nmap
   :prefix my/leader
   "t H" 'idle-highlight-mode))
#+END_SRC

*** Hl-todo

Highlight TODO and similar keywords in comments and strings.
See the [[https://github.com/tarsius/hl-todo][package repository]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package hl-todo
 :config
 (global-hl-todo-mode))
#+END_SRC

*** Highlight indentation

Provides two minor modes ~highlight-indentation-mode~ and
~highlight-indentation-current-column-mode~:

- ~highlight-indentation-mode~ - displays guidelines indentation (space
  indentation only).
- ~highlight-indentation-current-column-mode~ - displays guidelines for the
  current-point indentation (space indentation only).

See the [[https://github.com/antonj/Highlight-Indentation-for-Emacs][package repository]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package highlight-indentation
 :after general
 :hook
 (yaml-mode . highlight-indentation-mode)
 (haskell-mode . highlight-indentation-mode)
 (prog-mode . highlight-indentation-current-column-mode)
 :config
 (set-face-background 'highlight-indentation-face "#121212")
 (set-face-background 'highlight-indentation-current-column-face "#111111")
 (nmap
   :prefix my/leader
   "t i" 'highlight-indentation-mode)
 :diminish
 (highlight-indentation-mode
  highlight-indentation-current-column-mode))
#+END_SRC

*** Highlight chars

Highlight specified sets of characters, including whitespace.
Package repo is [[https://github.com/emacsmirror/highlight-chars][here]].

#+BEGIN_SRC emacs-lisp
(use-package highlight-chars
 :commands
 (hc-highlight-tabs
  hc-highlight-trailing-whitespace
  hc-highlight-hard-spaces
  hc-highlight-hard-hyphens)
 :preface
 (defun my/highlight-chars/setup ()
   (hc-highlight-tabs)
   (hc-highlight-trailing-whitespace)
   (hc-highlight-hard-spaces)
   (hc-highlight-hard-hyphens))
 :quelpa
 (highlight-chars :fetcher github :repo "emacsmirror/highlight-chars")
 :hook
 ((lisp-mode-hook prog-mode-hook) . my/highlight-chars/setup))
#+END_SRC

*** Highlight leading spaces

Higlight leading spaces that are part of the indentation.
See the [[https://github.com/mrBliss/highlight-leading-spaces][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package highlight-leading-spaces
 :custom-face
 (highlight-leading-spaces ((t (:foreground "#2a2a2a"))))
 :config
 (nmap
   :prefix my/leader
   "t s" 'highlight-leading-spaces-mode))
#+END_SRC

*** VI Tilde fringe

Display tildes on empty lines in the Emacs fringe a la Vi.
See the package [[https://github.com/syl20bnr/vi-tilde-fringe][repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package vi-tilde-fringe
 :config
 (global-vi-tilde-fringe-mode)
 :diminish vi-tilde-fringe-mode)
#+END_SRC

*** All the icons

A utility [[https://github.com/domtronn/all-the-icons.el][package]] to collect various =Icon Fonts= and propertize them within
Emacs.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
 :config
 (add-to-list
  'all-the-icons-mode-icon-alist
  '(package-menu-mode all-the-icons-octicon "package" :v-adjust 0.0)))
#+END_SRC

*** Mode line

#+BEGIN_SRC emacs-lisp
(use-package spaceline
 :init
 (setq
  powerline-default-separator 'bar
  spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
 :config
 (require 'spaceline-config)
 (spaceline-spacemacs-theme))
#+END_SRC

*** Beacon

Visualizes cursor position. Might slow (or not so), but it works good without
evil mode.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package beacon
 :after (general)
 :demand t
 :commands (beacon-mode)
 :custom
 ;; (beacon-size 12)
 ;; (beacon-blink-delay 0.0)
 ;; (beacon-blink-duration 0.5)
 (beacon-color "#ffd700")
 (beacon-blink-when-window-scrolls nil)
 (beacon-dont-blink-commands nil)
 :config
 (beacon-mode 1)
 (nmap
   :prefix my/leader
   "t b" 'beacon-mode)
 :diminish beacon-mode)
#+END_SRC

** Evil
*** Main

#+BEGIN_SRC emacs-lisp
(use-package evil
 :preface
 (defvar my/evil/esc-hook '(t)
   "A hook run after ESC is pressed in normal mode (invoked by `evil-force-normal-state').
   If a hook returns non-nil, all hooks after it are ignored.")
 (defun my/evil/attach-esc-hook ()
   "Run all escape hooks, if any returns non-nil, then stop there"
   (run-hook-with-args-until-success 'my/evil/esc-hook))
 :init
 (setq
  ;; Required by evil-collection
  evil-want-keybinding nil
  evil-want-integration t
  ;; To restore missing C-u in evil
  evil-want-C-u-scroll t
  evil-want-C-w-delete t
  evil-want-fine-undo "No"
  evil-want-visual-char-semi-exclusive t
  evil-want-Y-yank-to-eol t
  evil-magic t
  evil-want-abbrev-expand-on-insert-exit nil
  evil-echo-state t
  evil-indent-convert-tabs t
  evil-ex-search-vim-style-regexp t
  evil-overriding-maps nil
  evil-ex-substitute-global t
  ;; Column range for ex commands
  evil-ex-visual-char-range t
  evil-insert-skip-empty-lines t
  evil-search-module 'evil-search
  evil-mode-line-format 'nil
  ;; More vim-like behavior
  evil-symbol-word-search t
  ;; Cursors
  evil-default-cursor (face-background 'cursor nil t)
  evil-normal-state-cursor 'box
  evil-emacs-state-cursor `(,(face-foreground 'warning) box)
  evil-insert-state-cursor 'bar
  evil-visual-state-cursor 'box)
 :config
 ;; Enable evil-mode globally,
 ;; good for ex-vimmers like me
 (evil-mode t)
 ;; Special
 (evil-make-overriding-map special-mode-map 'normal)
 ;; Compilation
 (evil-set-initial-state 'compilation-mode 'normal)
 ;; Occur
 (evil-make-overriding-map occur-mode-map 'normal)
 (evil-set-initial-state 'occur-mode 'normal)
 (advice-add 'evil-force-normal-state :after 'my/evil/attach-esc-hook)
 ;; Unbind  evil-paste-pop and evil-paste-pop-next
 ;; which breaks evil-mc
 (with-eval-after-load 'evil-maps
   (define-key evil-normal-state-map (kbd "C-n") nil)
   (define-key evil-normal-state-map (kbd "C-p") nil))
 (nmap
   "C-M-l" 'evil-window-increase-width
   "C-M-h" 'evil-window-decrease-width
   "C-M-k" 'evil-window-increase-height
   "C-M-j" 'evil-window-decrease-height))
#+END_SRC

*** Evil collection

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
 :init
 (setq
  ;; Don't enable vim key bindings in minibuffer
  ;; its a default setting, just want it to be explicitly stated here
  evil-collection-setup-minibuffer nil
  ;; If you don't need everything - uncomment and add everything you want
  ;; evil-collection-mode-list '()
  evil-collection-company-use-tgn nil)
 :config
 (evil-collection-init))
#+END_SRC

*** Alignment

This package provides =gl= and =gL= align operators:
- =gl MOTION CHAR= - left alignment.
- =gL MOTION CHAR= - right alignment.

Go to the [[https://github.com/edkolev/evil-lion][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package evil-lion
 :after evil
 :commands
 (evil-lion-mode
  evil-lion-left
  evil-lion-right)
 :init
 (setq evil-lion-squeeze-spaces t))
#+END_SRC

*** Sentence navigation

Provides alternatives to ~forward-sentence~, ~backward-sentence~, and ~sentence~
text objects that work with sentences separated by one (or two) space(s) and is
aware of abbreviations.

See the [[https://github.com/noctuid/emacs-sentence-navigation][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package sentence-navigation
 :after evil
 :config
 (mmap
   ")" 'sentence-nav-evil-forward
   "(" 'sentence-nav-evil-backward
   "g)" 'sentence-nav-evil-forward-end
   "g(" 'sentence-nav-evil-backward-end)
 (mmap evil-outer-text-objects-map
   "s" 'sentence-nav-evil-outer-sentence)
 (mmap evil-inner-text-objects-map
   "s" 'sentence-nav-evil-inner-sentence))
#+END_SRC

*** Multiple cursors

#+BEGIN_SRC emacs-lisp
(use-package evil-mc
 :after (general evil)
 :commands
 (global-evil-mc-mode)
 :preface
 (defun my/evil-mc/esc ()
   "Clear evil-mc cursors and restore state."
   (when (evil-mc-has-cursors-p)
     (evil-mc-undo-all-cursors)
     (evil-mc-resume-cursors)
     t))
 :demand t
 :config
 (global-evil-mc-mode 1)
 (add-hook 'my/evil/esc-hook 'my/evil-mc/esc)
 (mmap
   "C-n" 'evil-mc-make-and-goto-next-match)
 (when (eq system-type 'darwin)
   ;; unbind isearch commands
   (unbind-key "s-d")
   (unbind-key "s-g")
   (mmap
     "s-d" 'evil-mc-make-and-goto-next-match
     "s-D" 'evil-mc-make-all-cursors))
 :diminish evil-mc-mode)
#+END_SRC

*** Ediff

#+BEGIN_SRC emacs-lisp
(use-package evil-ediff
 :demand t)
#+END_SRC

*** Matchit

#+BEGIN_SRC emacs-lisp
(use-package evil-matchit
 :after evil
 :demand t
 :commands
 (evilmi-jump-items
  evilmi-text-object
  global-evil-matchit-mode)
 :config
 (global-evil-matchit-mode 1))
#+END_SRC

*** Surround

#+BEGIN_SRC emacs-lisp
(use-package evil-surround
 :after evil
 :demand t
 :commands
 (global-evil-surround-mode
   evil-surround-edit
   evil-Surround-edit
   evil-surround-region)
 :config
 (global-evil-surround-mode 1))
#+END_SRC

*** Args

#+BEGIN_SRC emacs-lisp
(use-package evil-args
 :after evil
 :config
 (add-to-list 'evil-args-delimiters " ")
 ;; Bind evil-args text objects
 (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
 (define-key evil-outer-text-objects-map "a" 'evil-outer-arg)
 ;; Bind evil-forward/backward-args
 (define-key evil-normal-state-map "L" 'evil-forward-arg)
 (define-key evil-normal-state-map "H" 'evil-backward-arg)
 (define-key evil-motion-state-map "L" 'evil-forward-arg)
 (define-key evil-motion-state-map "H" 'evil-backward-arg)
 ;; Bind evil-jump-out-args
 (define-key evil-normal-state-map "K" 'evil-jump-out-args))
#+END_SRC

*** Embrace

#+BEGIN_SRC emacs-lisp
(use-package evil-embrace
 :after evil
 :commands
 (evil-embrace-enable-evil-surround-integration)
 :demand t
 :init
 (setq evil-embrace-show-help-p nil)
 :config
 (evil-embrace-enable-evil-surround-integration))
#+END_SRC

*** Visualstar

#+BEGIN_SRC emacs-lisp
(use-package evil-visualstar
 :after evil
 :commands
 (global-evil-visualstar-mode
   evil-visualstar/begin-search
   evil-visualstar/begin-search-forward
   evil-visualstar/begin-search-backward)
 :config
 (global-evil-visualstar-mode))
#+END_SRC

*** Vimish fold

#+BEGIN_SRC emacs-lisp
(use-package evil-vimish-fold
  :after (evil vimish-fold)
  :commands
  (evil-vimish-fold-mode)
  :config
  (evil-vimish-fold-mode 1)
  :diminish evil-vimish-fold-mode)
#+END_SRC

*** Indent plus

#+BEGIN_SRC emacs-lisp
(use-package evil-indent-plus
 :after evil
 :demand t
 :commands
 (evil-indent-plus-i-indent
  evil-indent-plus-a-indent
  evil-indent-plus-i-indent-up
  evil-indent-plus-a-indent-up
  evil-indent-plus-i-indent-up-down
  evil-indent-plus-a-indent-up-down))
#+END_SRC

*** Commentary

#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
 :after evil
 :demand t
 :commands
 (evil-commentary-mode
  evil-commentary-yank
  evil-commentary-line)
 :config (evil-commentary-mode)
 :diminish evil-commentary-mode)
#+END_SRC

*** Exchange

#+BEGIN_SRC emacs-lisp
(use-package evil-exchange
 :after evil
 :demand t
 :commands
 (evil-exchange
  evil-exchange-install)
 :config
 (evil-exchange-install))
#+END_SRC

*** Numbers

#+BEGIN_SRC emacs-lisp
(use-package evil-numbers
 :demand t
 :after evil)
#+END_SRC

** Diff

[[https://www.emacswiki.org/emacs/DiffMode][Diff mode]] is a standard Emacs major mode for highlighting and navigating =diff=
output.

#+BEGIN_SRC emacs-lisp
(use-package diff-mode
 :mode "/patch$"
 :init
 (setq
  ;; Open patches in read-only mode by default
  diff-default-read-only t))
#+END_SRC

** Eldoc

[[https://www.emacswiki.org/emacs/ElDoc][Eldoc]] displays the function signature of the closest function call around point
either in the minibuffer or in the modeline. [[https://github.com/stardiviner/eldoc-overlay][This package]] modifies Eldoc to
display this documentation inline using a buffer text overlay.

#+BEGIN_SRC emacs-lisp
(use-package eldoc-overlay
 :after general
 :init
 (setq eldoc-overlay-in-minibuffer-flag t)
 :config
 (nmap
   :prefix my/leader
   "t e" 'eldoc-overlay-toggle)
 :diminish "eo")
#+END_SRC

** Bookmarks

Most of the keybindings are set by the =evil-collection= package.

#+BEGIN_SRC emacs-lisp
(use-package bookmark
  :after general
  :init
  (setq
   bookmark-version-control t
   bookmark-save-flag 1)
  :config
  ;; Uncomment if you prefer going straight to bookmarks on Emacs startup.
  ;; (bookmark-bmenu-list)
  ;; (switch-to-buffer "*Bookmark List*")
  (nmap
    :prefix my/leader
    "b" 'bookmark-set))
#+END_SRC

** Completion
*** Company

Some of the key bindings are provided by the =evil-collection=.

#+BEGIN_SRC emacs-lisp
(use-package company
 :hook
 ;; Use company-mode in all buffers
 (after-init . global-company-mode)
 :custom
 (company-dabbrev-ignore-case nil)
 (company-dabbrev-code-ignore-case nil)
 (company-dabbrev-downcase nil)
 (company-idle-delay 0.2 "adjust this setting according to your typing speed")
 (company-minimum-prefix-length 1)
 :config
 (custom-set-faces
  '(company-preview ((t (:foreground "#171717" :underline t))))
  '(company-preview-common ((t (:inherit company-preview))))
  '(company-tooltip ((t (:background "#171717" :foreground "#ddd"))))
  '(company-tooltip-selection ((t (:background "#1f1f1f" :foreground "#eee"))))
  '(company-tooltip-common
    ((((type x)) (:inherit company-tooltip :weight bold))
     (t (:inherit company-tooltip))))
  '(company-tooltip-common-selection
    ((((type x)) (:inherit company-tooltip-selection :weight bold))
     (t (:inherit company-tooltip-selection))))
  '(company-scrollbar-bg ((t (:background "#111"))))
  '(company-scrollbar-fg ((t (:background "#1a1a1a")))))
 (unbind-key "C-SPC")
 (imap
  "C-SPC" 'company-complete
  "M-SPC" 'company-complete)
 (general-define-key
  :keymaps 'company-active-map
  "C-j" 'company-select-next-or-abort
  "C-k" 'company-select-previous-or-abort
  "C-o" 'company-other-backend
  "C-f" 'company-abort
  "C-d" 'company-show-doc-buffer
  "C-w" 'backward-kill-word)
 :diminish company-mode)
#+END_SRC

*** Company quickhelp

#+BEGIN_SRC emacs-lisp
(use-package company-quickhelp
 :after company
 :custom
 (company-quickhelp-delay 3)
 :config
 (general-define-key
  :keymaps 'company-active-map
  "C-c h" 'company-quickhelp-manual-begin))
#+END_SRC

*** Company FLX

FLX fuzzy matching for =company=.
This only works with the =company-capf= backend.

#+BEGIN_SRC emacs-lisp
(use-package flx)

(use-package company-flx
 :after (company flx)
 :commands
 (company-flx-mode)
 :demand t
 :config
 ;; use C-o to switch backend and
 ;; enable company mode fuzziness
 (company-flx-mode +1))
#+END_SRC

** Spellcheck

#+BEGIN_SRC emacs-lisp
(use-package ispell
 :ensure nil
 :custom
 (ispell-program-name "aspell")
 ;; (ispell-dictionary "english")
 ;; (ispell-local-dictionary "russian")
 (ispell-really-aspell t)
 (ispell-really-hunspell nil)
 (ispell-extra-args '("--sug-mode=ultra"))
 (ispell-encoding8-command t)
 (ispell-silently-savep t)
 (ispell-have-new-look t)
 (ispell-enable-tex-parser t)
 :config
 (nmap
   "C-c i w" 'ispell-word
   "C-c i c" 'ispell-comments-and-strings
   "C-c i d" 'ispell-change-dictionary
   "C-c i k" 'ispell-kill-ispell
   "C-c i m" 'ispell-message
   "C-c i r" 'ispell-region)
 (when (eq system-type 'darwin)
   (general-define-key
    "s-\\" 'ispell-word)))
#+END_SRC

** Flycheck

On-the-fly syntax checking for GNU Emacs.
See the [[https://www.flycheck.org/en/latest/index.html][flycheck.org]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
 :after (general)
 :demand t
 :commands
 (global-flycheck-mode)
 :init
 (setq-default
  flycheck-disabled-checkers
  '(emacs-lisp-checkdoc
    javascript-jshint
    haskell-stack-ghc
    haskell-ghc
    haskell-hlint))
 (setq
  flycheck-highlighting-mode 'lines
  flycheck-indication-mode 'left-fringe
  flycheck-mode-line-prefix "fly"
  flycheck-javascript-eslint-executable "eslint_d")
 :config
 (global-flycheck-mode 1)
 (nmap
   :prefix my/leader
   "e e" 'flycheck-list-errors
   "e c" 'flycheck-clear
   "e i" 'flycheck-manual
   "e C" 'flycheck-compile
   "e n" 'flycheck-next-error
   "e p" 'flycheck-previous-error
   "e b" 'flycheck-buffer
   "e v" 'flycheck-verify-setup
   "e V" 'flycheck-verify-checker)
 ;; Make the error list display like similar lists in contemporary IDEs
 ;; like VisualStudio, Eclipse, etc.
 (add-to-list
  'display-buffer-alist
  `(,(rx bos "*fucking errors*" eos)
    ;; (display-buffer-reuse-window
    ;;  display-buffer-in-side-window)
    (side . bottom)
    (reusable-frames . visible)
    (window-height . 0.33)))
 (unbind-key "C-j" flycheck-error-list-mode-map)
 :diminish flycheck-mode)
#+END_SRC

** Flyspell

#+BEGIN_SRC emacs-lisp
(use-package flyspell
 :ensure nil
 :after (general ispell)
 :custom
 (flyspell-delay 1)
 (flyspell-always-use-popup t)
 :init
 (setq
  ;; flyspell-default-dictionary "russian"
  ;; flyspell-dictionary "russian"
  flyspell-use-meta-tab nil
  flyspell-mode-line-string ""
  flyspell-auto-correct-binding (kbd ""))
 ;; Uncomment to enable spellcheck on the fly for all text modes or just for programming modes
 ;; :hook
 ;; ((text-mode . flyspell-mode)
  ;; flyspell-prog-mode is useful for spell checking in comments and strings
  ;; (prog-mode . flyspell-prog-mode))
 :config
 (unbind-key "C-." flyspell-mode-map)
 (nmap
   "C-c i b" 'flyspell-buffer
   "C-c i f" 'flyspell-mode))
#+END_SRC

** Compilation

Kill compilation process before starting another, save all buffers on =compile=,
scroll to the first compilation error automatically.

#+BEGIN_SRC emacs-lisp
(setq-default
 compilation-always-kill t
 compilation-ask-about-save nil
 compilation-scroll-output 'first-error)
#+END_SRC

** Dictionary
*** Powerthesaurus

#+BEGIN_SRC emacs-lisp
(use-package powerthesaurus
 :after general
 :config
 (nmap
   :prefix my/leader
   "L" 'powerthesaurus-lookup-word-at-point))
#+END_SRC

If you got the =error in process filter= chances are the =wordnik.com= is down,
try again later ;)

*** Define word

#+BEGIN_SRC emacs-lisp
(use-package define-word
 :after general
 :config
 (nmap
   :prefix my/leader
   "D" 'define-word-at-point))
#+END_SRC

** Dired
*** Constants (file extensions)

#+BEGIN_SRC emacs-lisp
(defconst my/dired-html-files-extensions
  '("htm" "html" "xhtml" "phtml" "haml"
    "asp" "aspx" "xaml" "php" "jsp")
  "HTML files extensions")
(defconst my/dired-styles-files-extensions
  '("css" "sass" "scss" "less")
  "Styles files extensions")
(defconst my/dired-xml-files-extensions
  '("xml" "xsd" "xsl" "xslt" "wsdl")
  "XML files extensions")
(defconst my/dired-document-files-extensions
  '("doc" "docx" "ppt" "pptx" "xls" "xlsx"
    "csv" "rtf" "djvu" "epub""wps" "pdf" "texi" "tex"
    "odt" "ott" "odp" "otp" "ods" "ots"
    "odg" "otg")
  "Document files extensions")
(defconst my/dired-text-files-extensions
  '("txt" "md" "org" "ini" "conf" "rc" "vim" "vimrc" "exrc")
  "Text files extensions")
(defconst my/dired-sh-files-extensions
  '("sh" "bash" "zsh" "fish" "csh" "ksh"
    "awk" "ps1" "psm1" "psd1" "bat" "cmd")
  "Shell files extensions")
(defconst my/dired-source-files-extensions
  '("py" "c" "cc" "cpp" "cxx" "c++" "h" "hpp" "hxx" "h++"
    "java" "pl" "rb" "el" "pl" "pm" "l" "jl" "f90" "f95"
    "R" "php" "hs" "purs" "coffee" "ts" "js" "json" "m" "mm"
    "ml" "asm" "vb" "ex" "exs" "erl" "go" "clj" "cljs"
    "sql" "yml" "yaml" "toml" "rs" "idr" "cs" "mk" "make" "swift"
    "rake" "lua")
  "Source files extensions")
(defconst my/dired-compressed-files-extensions
  '("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z"
    "war" "ear" "rar" "sar" "xpi" "apk" "tar" "7z"
    "gzip" "001" "ace" "lz"
    "lzma" "bzip2" "cab" "jar" "iso")
  "Compressed files extensions")
(defconst my/dired-image-files-extensions
  '("bmp" "jpg" "jpeg" "gif" "png" "tiff"
    "ico" "svg" "psd" "pcd" "raw" "exif"
    "BMP" "JPG" "PNG")
  "Image files extensions")
(defconst my/dired-audio-files-extensions
  '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
  "Dired Audio files extensions")
(defconst my/dired-video-files-extensions
  '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG"
    "mp4" "MP4" "ts" "TS" "m2ts"
    "M2TS" "avi" "AVI" "mov" "MOV" "wmv"
    "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
  "Dired Video files extensions")
(defconst my/dired-misc-files-extensions
  '("DS_Store" "projectile" "cache" "elc" "dat" "meta")
  "Misc files extensions")
#+END_SRC

*** Dired

Setup dired.

#+BEGIN_SRC emacs-lisp
(use-package dired
 :after general
 :ensure nil
 :custom
 ;; Do not bind C-x C-j since it's used by jabber.el
 (dired-bind-jump nil)
 :init
 ;; Prevents dired from creating an annoying popup
 ;; when dired-find-alternate-file is called
 (setq
  ;; If there is a dired buffer displayed in the next window,
  ;; use its current directory
  dired-dwim-target t
  dired-omit-verbose nil
  ;; human readable filesize
  dired-listing-switches "-ahlv"
  ;; recursive copy & delete
  dired-recursive-deletes 'always
  dired-recursive-copies 'always)
 (setq
  dired-garbage-files-regexp
  "\\.\\(?:aux\\|out\\|bak\\|dvi\\|log\\|orig\\|rej\\|toc\\|class\\)\\'")
 ;; Enable omit mode
 ;; (setq-default dired-omit-mode t)
 ;; Hide autosave files
 ;; (setq-default dired-omit-files "^\\.?#")
 ;; Uncomment the line below if you want to hide dot files
 ;; (setq-default dired-omit-files (concat dired-omit-files "\\|^\\.[^\\.]"))
 (setq
  dired-omit-extensions
  '("CVS" "RCS" ".o" "~" ".bin" ".lbin" ".fasl" ".ufsl" ".a" ".ln" ".blg"
    ".bbl" ".elc" ".lof" ".glo" ".idx" ".aux" ".glob" ".vo"
    ".lot" ".fmt" ".tfm" ".class" ".DS_Store"
    ".fas" ".lib" ".x86f" ".sparcf" ".lo" ".la" ".toc" ".aux" ".cp" ".fn"
    ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs"
    ".idx" ".lof" ".lot" ".glo" ".blg" ".bbl" ".cp" ".cps" ".fn" ".fns"
    ".ky" ".kys" ".pg" ".pgs" ".tp" ".tps" ".vr" ".vrs" ".gv" ".gv.pdf"))
 ;; macOS ls command doesn't support "--dired" option
 (when (string= system-type "darwin")
   (setq dired-use-ls-dired nil))
 :config
 (put 'dired-find-alternate-file 'disabled nil)
 (nmap
   :prefix my/leader
   "j" 'dired-jump)
 (nmap 'dired-mode-map
   "gg" 'evil-goto-first-line
   "G" 'evil-goto-line
   "b" 'bookmark-set)
 :hook
 (dired-mode . dired-hide-details-mode)
 :diminish dired-mode)
#+END_SRC

*** Dired fl

Extra Emacs font lock rules for a more colourful dired.
See the [[https://github.com/purcell/diredfl][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package diredfl
 :after dired
 :hook
 (dired-mode . diredfl-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package dired-launch)
#+END_SRC

*** Dired+

Setup [[https://github.com/emacsmirror/dired-plus][dired+]].

#+BEGIN_SRC emacs-lisp
(use-package dired+
 :after dired
 :quelpa (dired+ :fetcher github :repo "emacsmirror/dired-plus")
 :commands
 (dired-read-dir-and-switches)
 :init
 (setq
  diredp-hide-details-initially-flag nil
  diredp-hide-details-propagate-flag nil))
#+END_SRC

*** Dired hacks.

Collection of useful dired additions.

**** Prerequisites

First, we need to install some =dired hacks= dependencies.

#+BEGIN_SRC emacs-lisp
(use-package dash)
(use-package dired-hacks-utils
 :after dired
 :demand t)
#+END_SRC

**** Filter

#+BEGIN_SRC emacs-lisp
(use-package dired-filter
 :after dired
 :hook
 (dired-mode . dired-filter-group-mode)
 :init
 (setq
  dired-filter-keep-expanded-subtrees nil
  dired-filter-group-saved-groups
  '(("default"
     ("video" (extension "mkv" "avi" "mp4" "webm"))
     ("archives" (extension "zip" "rar" "gz" "bz2" "tar"))
     ("pdf" (extension "pdf"))
     ("tex" (extension "tex" "bib"))
     ("js" (extension "js"))
     ("ts" (extension "ts"))
     ("json" (extension "json"))
     ("styles" (extension "css" "scss" "sass" "less"))
     ("html" (extension "html"))
     ("haskell" (extension "hs"))
     ("idris" (extension "idr"))
     ("purescript" (extension "purs"))
     ("c/c++"
      (extension
       "c" "cc" "cpp" "cxx" "c++"
       "h" "hpp" "hxx" "h++"))
     ("org" (extension "org"))
     ("lisp" (extension "el"))
     ("word" (extension "docx" "doc"))
     ("excel" (extension "xlsx" "xls"))
     ("text" (extension "txt"))
     ("svg" (extension "svg"))
     ("shell"
      (extension
       "sh" "bash" "zsh" "fish" "csh" "ksh"
       "awk" "ps1" "psm1" "psd1" "bat" "cmd"))
     ("audio"
      (extension
       "mp3" "ogg" "flac" "wav"))
     ("img"
      (extension
       "bmp" "jpg" "jpeg" "gif" "png" "tiff"
       "ico" "svg" "psd" "pcd" "raw" "exif")))))
 (nmap 'dired-mode-map
   "/" 'dired-filter-map
   "C-c C-t" 'dired-filter-group-toggle-header
   "C-c C-g" 'dired-filter-group-mode))
#+END_SRC

**** Avfs

#+BEGIN_SRC emacs-lisp
(use-package dired-avfs
 :after (dired dired-hack-utils))
#+END_SRC

**** Open

#+BEGIN_SRC emacs-lisp
(use-package dired-open
 :after (dired dired-hack-utils))
#+END_SRC

**** Narrow

#+BEGIN_SRC emacs-lisp
(use-package dired-narrow
 :after (general dired dired-hack-utils)
 :config
 (nmap 'dired-mode-map
   "," 'dired-narrow))
#+END_SRC

*** Peep dired

Peep at files in another window from dired buffers.

#+BEGIN_SRC emacs-lisp
(use-package peep-dired
 :after (dired general)
 :preface
 (defconst my/peep-dired/ignored-extensions
   (append
    my/dired-document-files-extensions
    my/dired-compressed-files-extensions
    my/dired-image-files-extensions
    my/dired-audio-files-extensions
    my/dired-video-files-extensions
    my/dired-misc-files-extensions))
 :hook
 (peep-dired . evil-normalize-keymaps)
 :init
 (setq
  peep-dired-ignored-extensions my/peep-dired/ignored-extensions
  peep-dired-cleanup-on-disable t
  peep-dired-enable-on-directories t)
 :config
 (nmap 'dired-mode-map
   "C-c C-v" 'peep-dired)
 (general-define-key
  :states '(normal)
  :keymaps 'peep-dired-mode-map
  "j" 'peep-dired-next-file
  "k" 'peep-dired-prev-file))
#+END_SRC

** Neotree

Most of key bindings are provided by the =evil-collection=.

#+BEGIN_SRC emacs-lisp
(use-package neotree
 :after general
 :functions
 (visual-line-mode)
 :preface
 (defvar my/neotree/open-app
   (if (eq system-type 'darwin)
       "open" "xdg-open"))
 (defun my/neotree/setup (_unused)
   (linum-mode -1)
   (visual-line-mode -1)
   (vi-tilde-fringe-mode -1))
 :init
 (setq
  neo-autorefresh t
  neo-theme (if (display-graphic-p) 'nerd 'arrow)
  neo-smart-open t
  neo-window-width 25
  neo-auto-indent-point t
  neo-create-file-auto-open t
  neo-mode-line-type 'none
  neo-confirm-create-file 'off-p
  neo-confirm-delete-file 'off-p
  neo-confirm-delete-directory-recursively 'off-p
  neo-confirm-kill-buffers-for-files-in-directory 'off-p
  neo-default-system-application my/neotree/open-app
  neo-confirm-create-directory 'off-p
  neo-confirm-change-root 'off-p)
 :hook
 (neo-after-create . my/neotree/setup)
 :config
 (nmap 'neotree-mode-map
   "gg" 'evil-goto-first-line
   "G" 'evil-goto-line
   "C" 'neotree-change-root)
 (nmap
   :prefix my/leader
   "q" 'neotree-show
   "Q" 'neotree-hide
   "r" 'neotree-find)
 (when (eq system-type 'darwin)
   (general-define-key
    "s-B" 'neotree-toggle)))
#+END_SRC

** Navigation
*** Ace window

Quickly switch between windows (splits).

When there are two windows, =ace-window= will call ~other-window~. If there are
more, each window will have the first character of its window label highlighted
at the upper left of the window.

See the [[https://github.com/abo-abo/ace-window][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
 :custom
 (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l) "Use home row for selecting.")
 (aw-scope 'frame "Highlight only current frame.")
 :config
 (nmap
   :prefix my/leader
   "w" 'ace-window))
#+END_SRC

*** Winner

Undo/redo window layout (split pane) config.

#+BEGIN_SRC emacs-lisp
(use-package winner
 :demand t
 :init
 (setq
  winner-dont-bind-my-keys t
  winner-boring-buffers
  '("*Completions*"
    "*Compile-Log*"
    "*inferior-lisp*"
    "*Fuzzy Completions*"
    "*Apropos*"
    "*Help*"
    "*cvs*"
    "*Buffer List*"
    "*Ibuffer*"
    "*esh command on file*"))
 :config
 (winner-mode 1)
 :config
 (nmap
   :prefix my/leader
   "U" 'winner-undo
   "R" 'winner-redo)
 (when (eq system-type 'darwin)
   (general-define-key
    "C-s-[" 'winner-undo
    "C-s-]" 'winner-redo)))
#+END_SRC

*** Expand region

Increases the selected region by semantic units.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
 :after general
 :config
 (vmap
   "v" 'er/expand-region)
 (when (eq system-type 'darwin)
   (vmap
     "s-'" 'er/expand-region)))
#+END_SRC

*** Ivy

Setup [[https://github.com/abo-abo/swiper][ivy]].

#+BEGIN_SRC emacs-lisp
(use-package ivy
 :preface
 (defun my/ivy/switch-buffer-occur ()
   "Occur function for `ivy-switch-buffer' using `ibuffer'."
   (ibuffer nil (buffer-name) (list (cons 'name ivy--old-re))))
 :commands
 (ivy-mode ivy-set-occur)
 :custom
 (ivy-count-format "%d/%d " "Show anzu-like counter")
 :custom-face
 ;; (ivy-current-match ((t (:inherit 'hl-line))))
 ;; TODO: Make this theme-dependent (use :inherit)
 (ivy-current-match ((t (:background "#4782b4" :foreground "#fff"))))
 :init
 (setq
  ;; Enable bookmarks and recentf
  ;; (add 'recentf-mode' and bookmarks to 'ivy-switch-buffer')
  ivy-use-virtual-buffers t
  ;; Display full buffer name
  ivy-virtual-abbreviate 'full
  ;; Number of result lines to display
  ivy-height 10
  ;; Current input becomes selectable as a candidate
  ;; solves the issue of creating a file or
  ;; a directory `foo` when a file `foobar` already exists
  ;; another way is to use C-M-j
  ivy-use-selectable-prompt t
  ;; Wrap around ivy results
  ivy-wrap t
  ;; Omit ^ at the beginning of regexp
  ivy-initial-inputs-alist nil)
 :config
 (ivy-mode 1)
 ;; Enable/disable fuzzy matching
 ;; see: https://oremacs.com/2016/01/06/ivy-flx/
 ;; (setq ivy-re-builders-alist
 ;;       '((ivy-switch-buffer . ivy--regex-plus)
 ;;         (t . ivy--regex-fuzzy)))
 (setq ivy-re-builders-alist '((t . ivy--regex-plus)))
 (ivy-set-occur 'ivy-switch-buffer 'my/ivy/switch-buffer-occur)
 (nmap
   :prefix my/leader
   "a" 'ivy-switch-buffer)
 (nmap
   "C-c v" 'ivy-push-view
   "C-c V" 'ivy-pop-view)
 (when (eq system-type 'darwin)
   (general-define-key
    "s-b" 'ivy-switch-buffer
    "M-s-b" 'ivy-resume))
 (general-define-key
  :keymaps 'ivy-minibuffer-map
  "C-t" 'ivy-toggle-fuzzy
  "C-j" 'ivy-next-line
  "C-k" 'ivy-previous-line
  "C-n" 'ivy-next-history-element
  "C-p" 'ivy-previous-history-element
  "<C-return>" 'ivy-immediate-done
  "C-l" 'ivy-immediate-done
  "C-w" 'ivy-backward-kill-word)
 :diminish ivy-mode)
#+END_SRC

Ivy icons.

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-ivy
 :after (ivy projectile)
 :commands
 (all-the-icons-ivy-setup)
 :custom
 (all-the-icons-ivy-buffer-commands '() "Don't use for buffers.")
 (all-the-icons-ivy-file-commands
  '(counsel-find-file
    counsel-file-jump
    counsel-recentf
    counsel-projectile-find-file
    counsel-projectile-find-dir) "Prettify more commands.")
 :config
 (all-the-icons-ivy-setup))
#+END_SRC

**** Rich

More friendly interface for ivy. Here is the [[https://github.com/Yevgnen/ivy-rich][package repo]].

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
 :after ivy
 :commands
 ivy-rich-mode
 :init
 (setq
  ;; To abbreviate paths using abbreviate-file-name
  ;; (e.g. replace “/home/username” with “~”)
  ivy-rich-path-style 'abbrev)
 :config
 (ivy-rich-mode 1))
#+END_SRC

**** Xref

#+BEGIN_SRC emacs-lisp
(use-package ivy-xref
 :custom
 (xref-show-xrefs-function 'ivy-xref-show-xrefs "Use Ivy to show xrefs"))
#+END_SRC

**** Flyspell correct

#+BEGIN_SRC emacs-lisp
(use-package flyspell-correct-ivy
 :after (general flyspell ivy)
 :demand t
 :init
 (setq flyspell-correct-interface 'flyspell-correct-ivy)
 :config
 (nmap 'flyspell-mode-map
   "C-;" 'flyspell-correct-previous-word-generic))
#+END_SRC

**** Hydra

#+BEGIN_SRC emacs-lisp
#+END_SRC

*** IBuffer VC

#+BEGIN_SRC emacs-lisp
(use-package ibuffer-vc
 :custom
 (ibuffer-formats
  '((mark modified read-only vc-status-mini " "
          (name 18 18 :left :elide)
          " "
          (size 9 -1 :right)
          " "
          (mode 16 16 :left :elide)
          " "
          filename-and-process)) "include vc status info")
 :hook
 (ibuffer . (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC

*** FZF

#+BEGIN_SRC emacs-lisp
(use-package fzf)
#+END_SRC

*** Counsel

Setup counsel.

#+BEGIN_SRC emacs-lisp
(use-package counsel
 :after general
 :init
 ;; much faster than grep
 (setq
  counsel-git-cmd "rg --files"
  ;;  truncate all lines that are longer than 120 characters
  counsel-grep-base-command
  "rg -i -M 120 --no-heading --line-number --color never %s .")
 :config
 (nmap
   "C-f" 'counsel-imenu)
 (imap
   "C-," 'counsel-unicode-char)
 (nmap
   :prefix my/leader
   "f" 'counsel-rg
   "F" 'counsel-fzf
   "h v" 'counsel-describe-variable
   "h f" 'counsel-describe-function)
 (when (eq system-type 'darwin)
   (nmap
     "s-f" 'counsel-rg))
 (nmap
   "M-x" 'counsel-M-x)
 (nmap
   :prefix "C-x"
   "C-r" 'find-file
   "C-f" 'counsel-find-file
   "C-g" 'counsel-git-grep
   "p" 'counsel-package)
 (nmap
   :prefix my/leader
   my/leader 'counsel-M-x
   "T" 'counsel-load-theme
   "J" 'counsel-bookmark))
#+END_SRC

*** Ace link

Package for selecting a link to jump to.

#+BEGIN_SRC emacs-lisp
(use-package ace-link
 :after (counsel)
 :commands
 (ace-link-setup-default)
 :config
 (nmap
   "C-c C-l" 'counsel-ace-link)
 :config
 (ace-link-setup-default))
#+END_SRC

*** Counsel etags

#+BEGIN_SRC emacs-lisp
(use-package counsel-etags
  :after (general counsel))
#+END_SRC

*** Swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
 :after general
 :init
 ;; Recenter after swiper is finished
 (setq swiper-action-recenter t)
 :config
 (general-define-key
  :keymaps 'swiper-map
  "C-r" 'swiper-query-replace)
 (nmap
   "C-s" 'swiper))
#+END_SRC

*** Dumb jump

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
 :custom
 (dumb-jump-selector 'ivy)
 (dumb-jump-prefer-searcher 'ag)
 (nmap
   "C-c C-j" 'dumb-jump-go))
#+END_SRC

*** Avy

#+BEGIN_SRC emacs-lisp
(use-package avy
 :demand t
 :config
 (mmap
   :prefix "C-c j"
   "c" 'avy-goto-char
   "w" 'avy-goto-word-1
   "l" 'avy-goto-line))
#+END_SRC

*** Avy zap

#+BEGIN_SRC emacs-lisp
(use-package avy-zap
 :bind
 ([remap zap-to-char] . avy-zap-to-char))
#+END_SRC

*** Avy flycheck

#+BEGIN_SRC emacs-lisp
(use-package avy-flycheck
 :after (general avy flycheck)
 :commands
 avy-flycheck-setup
 :init
 (setq avy-flycheck-style 'pre)
 :config
 (avy-flycheck-setup)
 (nmap
   :prefix my/leader
   "n e" 'avy-flycheck-goto-error))
#+END_SRC

*** Tmux integration

Seamlessly navigate between Emacs and Tmux splits.
See the [[https://github.com/keith/evil-tmux-navigator][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package navigate
 :quelpa (navigate :fetcher github :repo "keith/evil-tmux-navigator")
 :config
 (require 'navigate))
#+END_SRC

** Projectile
*** Setup

#+BEGIN_SRC emacs-lisp
(use-package projectile
 :after (general ivy)
 :commands
 projectile-mode
 :init
 ;; projectile requires this setting for ivy completion
 (setq
  projectile-indexing-method 'alien
  projectile-completion-system 'ivy
  ;; useful for very large projects
  projectile-enable-caching t
  projectile-sort-order 'recently-active
  projectile-mode-line nil
  projectile-use-git-grep t
  projectile-file-exists-remote-cache-expire (* 10 60)
  projectile-file-exists-local-cache-expire (* 5 60)
  projectile-require-project-root nil
  projectile-globally-ignored-directories
  '(".git" ".svn" ".hg" "_darcs"
    "out" "output" "repl"
    "dist" "dist-newstyle"
    ".vagrant"
    "project" "target" "compiled" ".bundle"
    "*build" "jar"
    "venv" ".virtualenv"
    "*__pycache__*" "*.egg-info"
    ".tox" ".cache" ".cabal-sandbox" ".stack-work"
    ".emacs.d" "elpa" "site-lisp"
    "bin" "eclipse-bin" ".ensime_cache" ".idea"
    ".eunit" ".bzr"
    "vendor" "uploads" "assets"
    "node_modules" "bower_components"
    "_build" ".psci_modules" ".pulp-cache")
  projectile-globally-ignored-files
  '(".DS_Store" "TAGS" ".nrepl-port" "*.gz" "*.pyc" ".purs-repl"
    "*.jar" "*.tar.gz" "*.tgz" "*.zip" "package-lock.json"))
 :config
 ;; use projectile everywhere
 (projectile-mode)
 ;; remove the mode name for projectile-mode, but show the project name
 ;; :delight '(:eval (concat " " (projectile-project-name)))
 (nmap
   :prefix my/leader
   "DEL" 'projectile-invalidate-cache)
 :diminish projectile-mode)
#+END_SRC

*** Counsel

Projectile replacements.

#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
 :after (counsel projectile general)
 :config
 (nmap
   "C-q" 'counsel-projectile-find-file
   "C-a" 'counsel-projectile-switch-to-buffer
   "C-p" 'counsel-projectile-switch-project))
#+END_SRC

** Git
*** With editor

Makes it easy to use the Emacsclient as the =$EDITOR= of child processes, making
sure they know how to call home. For remote processes a substitute is provided,
which communicates with Emacs on standard output instead of using a socket as
the Emacsclient does.

#+BEGIN_SRC emacs-lisp
(use-package with-editor
 :config
 (nmap 'with-editor-mode-map
   ;; it closes the Magit's git-commit window
   ;; instead of switching to evil-normal-state
   ;; [escape] 'with-editor-cancel
   "RET" 'with-editor-finish)
 (evil-set-initial-state 'with-editor-mode 'insert))
#+END_SRC

*** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
 :demand t)
#+END_SRC

*** Evil-Magit

#+BEGIN_SRC emacs-lisp
(use-package evil-magit
 :after (evil magit fullframe)
 :init
 (setq evil-magit-state 'normal)
 :config
 ;; (fullframe magit-log-all quit-window)
 ;; (fullframe magit-log-current quit-window)
 ;; When commiting, start in evil-insert state
 (with-eval-after-load 'evil
   (add-hook 'git-commit-mode-hook 'evil-insert-state)
   (evil-set-initial-state 'magit-log-edit-mode 'insert))
 (nmap
   :prefix my/leader
   "g w" 'magit-stage-file      ; "w" - write
   "g r" 'magit-unstage-file    ; "r" - remove
   "g R" 'magit-reset-soft      ; "R" - soft reset
   "g s" 'magit-status          ; "s" - status
   "g d" 'magit-diff-range      ; "d" - diff
   "g m" 'magit-merge-plain     ; "m" - merge
   "g f" 'magit-file-popup      ; "f" - file
   "g b" 'magit-branch-checkout ; "b" - branch
   "g B" 'magit-branch-create   ; "B" - create a new branch
   "g g" 'magit-blame-addition  ; "g" - blame (for a quick access)
   "g c" 'magit-commit-create   ; "c" - commit
   "g z" 'magit-rebase-branch   ; "z" - rebase
   "g l" 'magit-log-all         ; "l" - log
   "g p" 'magit-push-other)     ; "p" - push
 (when (eq system-type 'darwin)
   (general-define-key
    "s-g 'magit-status")))
#+END_SRC

*** Magit todos

#+BEGIN_SRC emacs-lisp
(use-package magit-todos
 :after (magit general)
 :commands
 (magit-todos-mode)
 :config
 (magit-todos-mode)
 (nmap
   :prefix my/leader
   "/" 'magit-todos-list))
#+END_SRC

*** Forge

#+BEGIN_SRC emacs-lisp
(use-package forge)
#+END_SRC

*** Git gutter

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
 :after general
 :commands
 (global-git-gutter-mode)
 :config
 (global-git-gutter-mode t)
 ;; (git-gutter:linum-setup)
 (custom-set-variables
  '(git-gutter:update-interval 2)
  '(git-gutter:modified-sign "*")
  '(git-gutter:added-sign "+")
  '(git-gutter:deleted-sign "-")
  '(git-gutter:hide-gutter nil))
 (set-face-foreground 'git-gutter:modified "#444")
 (set-face-foreground 'git-gutter:added "light green")
 (set-face-foreground 'git-gutter:deleted "maroon3")
 (nmap
   :prefix my/leader
   "t g" 'git-gutter-mode)
 :diminish git-gutter-mode)
#+END_SRC

*** Time machine

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine)
#+END_SRC

*** Syntactic modes

#+BEGIN_SRC emacs-lisp
(use-package gitattributes-mode)
(use-package gitignore-mode)
(use-package gitconfig-mode)
#+END_SRC

*** Gist

#+BEGIN_SRC emacs-lisp
(use-package gist
 :after general
 :config
 (nmap
   :prefix my/leader
   "G l" 'gist-list
   "G b" 'gist-buffer
   "G B" 'gist-buffer-private
   "G r" 'gist-region
   "G R" 'gist-region-private))
#+END_SRC

** Shell
*** Eshell

#+BEGIN_SRC emacs-lisp
(use-package eshell
 :ensure nil
 ;; :config
 ;; (unbind-key "C-j" eshell-mode-map)
 ;; (unbind-key "C-k" eshell-mode-map)
 )
#+END_SRC

*** EM-smart

#+BEGIN_SRC emacs-lisp
(use-package em-smart
 :ensure nil
 :config
 (eshell-smart-initialize)
 :custom
 (eshell-where-to-jump 'begin)
 (eshell-review-quick-commands nil)
 (eshell-smart-space-goes-to-end t))
#+END_SRC

*** Esh autosuggest

#+BEGIN_SRC emacs-lisp
(use-package esh-autosuggest
 :hook (eshell-mode . esh-autosuggest-mode))
#+END_SRC

*** EShell toggle

#+BEGIN_SRC emacs-lisp
(use-package eshell-toggle
 :ensure nil
 :after general
 :quelpa
 (eshell-toggle
  :repo "4DA/eshell-toggle"
  :fetcher github
  :version original)
 :config
 (nmap
   :prefix my/leader
   "`" 'eshell-toggle))
#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC

** Undo
*** Propose

#+BEGIN_SRC emacs-lisp :tangle no
(use-package undo-propose
 :after general
 :config
 (nmap
   :prefix my/leader
   "u" 'undo-propose)
 (nmap 'undo-propose-mode-map
   :prefix my/leader
   "d" 'undo-propose-diff)
 (nmap 'undo-propose-mode-map
   "RET" 'undo-propose-finish
   [escape] 'undo-propose-cancel))
#+END_SRC

*** Tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
 :after general
 ;; :quelpa
 ;; (undo-tree :url "https://www.lawlist.com/lisp/undo-tree.el" :fetcher url)
 :commands
 (global-undo-tree-mode)
 :init
 (setq
  undo-tree-visualizer-timestamps t
  undo-tree-enable-undo-in-region nil
  ;; Attempt to fix the "unrecognized entry in undo list" error
  ;; undo-tree-auto-save-history nil
  undo-tree-history-directory-alist
  `(("." . ,(expand-file-name "undo" user-emacs-directory))))
 ;; Diff is slow as hell and it doesn't destroy the diff buffer automatically.
 ;; I'd recommend turning it on/off manually when needed.
 ;; (setq undo-tree-visualizer-diff t)
 :config
 (global-undo-tree-mode)
 (general-define-key
  :states 'motion
  :keymaps
  '(undo-tree-visualizer-mode-map
    undo-tree-visualizer-selection-mode-map)
  "k" 'undo-tree-visualize-undo
  "j" 'undo-tree-visualize-redo
  "l" 'undo-tree-visualize-switch-branch-right
  "h" 'undo-tree-visualize-switch-branch-left
  "t" 'undo-tree-visualizer-toggle-timestamps
  "K" 'undo-tree-visualize-undo-to-x
  "J" 'undo-tree-visualize-redo-to-x
  [escape] 'undo-tree-visualizer-abort
  "RET" 'undo-tree-visualizer-quit)
 (nmap
   :prefix my/leader
   "u" 'undo-tree-visualize)
 :diminish undo-tree-mode)
#+END_SRC

** SSH
*** Config mode

Emacs mode for editing ssh config files.

It does the following:
- Fontify's the SSH config keywords.
- Keys for skipping from host section to host section.
- Provides indentation.

See the [[https://github.com/jhgorrell/ssh-config-mode-el][package repo]] for details.

#+BEGIN_SRC emacs-lisp
(use-package ssh-config-mode
 :mode
 (("/\\.ssh/config\\'" . ssh-config-mode)
  ("/sshd?_config\\'" . ssh-config-mode)
  ("/known_hosts\\'" . ssh-known-hosts-mode)
  ("/authorized_keys2?\\'" . ssh-authorized-keys-mode))
 :hook
 (ssh-config-mode . turn-on-font-lock))
#+END_SRC

*** Tramp

Setup =tramp=.

#+BEGIN_SRC emacs-lisp
(use-package tramp
 :ensure nil
 :custom
 ;; faster than scp
 (tramp-default-method "ssh")
 ;; disable autosave for tramp buffers
 (tramp-auto-save-directory "/tmp")
 (tramp-default-proxies-alist nil))
#+END_SRC

*** Counsel-tramp

#+BEGIN_SRC emacs-lisp
(use-package counsel-tramp
 :after (counsel tramp general)
 :config
 (nmap
   "C-x t" 'counsel-tramp
   "C-x T" 'counsel-tramp-quit))
#+END_SRC

*** Docker-tramp

#+BEGIN_SRC emacs-lisp
(use-package docker-tramp
  :after tramp)
#+END_SRC

*** Vagrant-tramp

#+BEGIN_SRC emacs-lisp
(use-package vagrant-tramp
  :after tramp)
#+END_SRC

*** Kubernetes-tramp

#+BEGIN_SRC emacs-lisp
(use-package kubernetes-tramp
  :after tramp)
#+END_SRC

*** Blah

#+BEGIN_SRC emacs-lisp

#+END_SRC

** Smartparens
*** Main

#+BEGIN_SRC emacs-lisp
(use-package smartparens
 :commands
 (smartparens-mode
  sp-with-modes
  sp-local-pair
  sp-pair)
 :hook
 ((conf-mode text-mode prog-mode) . smartparens-mode)
 :config
 (use-package smartparens-config
  :ensure nil
  :demand t)
 (general-define-key
  :keymaps 'sp-keymap
  "M-F" 'sp-forward-symbol
  "M-B" 'sp-backward-symbol
  "C-M-k" 'sp-kill-sexp
  "C-M-w" 'sp-copy-sexp
  "C-M-t" 'sp-transpose-sexp
  "M-<left>" 'sp-forward-slurp-sexp
  "C-M-<left>" 'sp-forward-barf-sexp
  "M-<right>" 'sp-backward-slurp-sexp
  "C-M-<right>" 'sp-backward-barf-sexp
  "M-D" 'sp-splice-sexp
  "C-M-[" 'sp-select-previous-thing
  "C-M-]" 'sp-select-next-thing
  "C-c s u" 'sp-up-sexp
  "C-c s d" 'sp-down-sexp
  "C-c s t" 'sp-prefix-tag-object
  "C-c s p" 'sp-prefix-pair-object
  "C-c s c" 'sp-convolute-sexp
  "C-c s a" 'sp-absorb-sexp
  "C-c s e" 'sp-emit-sexp
  "C-c s p" 'sp-add-to-previous-sexp
  "C-c s n" 'sp-add-to-next-sexp
  "C-c s j" 'sp-join-sexp
  "C-c s s" 'sp-split-sexp
  "C-c s (" 'sp-wrap-round
  "C-c s [" 'sp-wrap-square
  "C-c s {" 'sp-wrap-curly)
 :diminish smartparens-mode)
#+END_SRC

*** Evil

#+BEGIN_SRC emacs-lisp
(use-package evil-smartparens
 :config
 (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+END_SRC

** Snippets
*** Yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
 :preface
 (defvar my/yasnippet/snippets
  (my/emacs-path "yasnippet-snippets/snippets"))
 :load-path (lambda () (my/emacs-path "yasnippet-snippets"))
 :ensure nil
 :init
 (setq
  yas-wrap-around-region t
  yas-indent-line t
  yas-snippet-dirs `(,my/yasnippet/snippets))
 :config
 (yas-global-mode 1)
 (nmap
   :prefix my/leader
   "y i" 'yas-insert-snippet
   "y n" 'yas-new-snippet
   "y v" 'yas-visit-snippet-file
   "y r" 'yas-reload-all)
 (imap
   "C-l" 'yas-insert-snippet)
 :diminish yas-minor-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-yasnippet
 :config
 (imap
   "C-s" 'ivy-yasnippet))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package auto-yasnippet
 :after (general yasnippet)
 :config
 (nmap
   :prefix my/leader
   "y c" 'aya-create
   "y e" 'aya-expand
   "y o" 'aya-open-line))
#+END_SRC

** Org
*** Main

#+BEGIN_SRC emacs-lisp
(use-package org
 :after (general counsel)
 ;; to be sure we have latest Org version
 ;; :ensure org-plus-contrib
 :mode ("\\.org\\'" . org-mode)
 :init
 (setq
  ;; Forces to mark all child tasks as DONE before
  ;; you can mark the parent as DONE
  org-enforce-todo-dependencies t
  ;; Insert an annotation in a task when
  ;; it is marked as done including a
  ;; timestamp of when exactly that happened
  org-log-done (quote time)
  ;; Insert annotations when you change
  ;; the deadline of a task, which will note
  ;; the previous deadline date and when it was changed
  org-log-redeadline (quote time)
  ;; Same as above, but for the scheduled dates
  org-log-reschedule (quote time)
  ;; Hide leading stars
  org-hide-leading-stars t
  ;; Use syntax highlighting in
  ;; source blocks while editing
  org-src-fontify-natively t
  ;; Noticeable ellipsis.
  ;; Others: ▼,↴,⬎,⤷,…,⤵,⋱,•
  org-ellipsis "…"
  ;; Keep org files in Dropbox
  org-directory "~/Dropbox/org"
  org-agenda-files '("~/Dropbox/org/")
  org-highest-priority ?A
  org-lowest-priority ?C
  org-default-priority ?B
  ;; Default task sequence/lifecycle
  org-todo-keywords
  '((sequence "TODO" "IN-PROGRESS" "WAITING" "HOLD" "|" "DONE" "CANCELLED"))
  org-todo-keyword-faces
  '(("TODO" :foreground "magenta2" :weight bold)
    ("IN-PROGRESS" :foreground "dodger blue" :weight bold)
    ("WAITING" :foreground "orange" :weight bold)
    ("DONE" :foreground "forest green" :weight bold)
    ("HOLD" :foreground "magenta" :weight bold)
    ("CANCELLED" :foreground "forest green" :weight bold)
    ("BUG" :foreground "red" :weight bold)
    ("UNTESTED" . "purple"))
  org-todo-state-tags-triggers
  '(("CANCELLED" ("CANCELLED" . t))
    ("WAITING" ("WAITING" . t))
    ("HOLD" ("WAITING") ("HOLD" . t))
    (done ("WAITING") ("HOLD"))
    ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
    ("IN-PROGRESS" ("WAITING") ("CANCELLED") ("HOLD"))
    ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))
  ;; Custom templates
  org-capture-templates
  '(("t" "todo" entry (file "todos.org")
     "* TODO %?\n%U\n%a\n")
    ("n" "note" entry (file "notes.org")
     "* %?\n:NOTE:\n%U\n%a\n")
    ("i" "idea" entry (file "ideas.org")
     "* %?\n:IDEA:\n%U\n%a\n")
    ("j" "journal" entry (file+datetree "diary.org")
     "* %?\n%U\n")
    ("h" "habit" entry (file "habits.org")
     "* TODO %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: TODO\n:END:\n"))
  ;; Do not dim blocked tasks
  org-agenda-dim-blocked-tasks nil
  ;; Compact the block agenda view
  org-agenda-compact-blocks t)
 :config
 (nmap
   :prefix my/leader
   "o" 'org-todo-list
   "O" 'counsel-org-goto-all
   "c" 'counsel-org-capture
   "A" 'my/org/agenda-list)
 (mmap 'org-agenda-mode-map
   "C-c C-l" 'org-agenda-log-mode)
 :delight "org")
#+END_SRC

*** Evil

#+BEGIN_SRC emacs-lisp
(use-package evil-org
 :after (general org)
 :commands
 (evil-org-set-key-theme)
 :preface
 (defun my/evil-org/setup ()
   (evil-org-set-key-theme)
   (evil-org-agenda-set-keys))
 :hook
 ((org-mode . evil-org-mode)
  (evil-org-mode . my/evil-org/setup))
 :init
 (setq
  evil-org-key-theme
  '(textobjects
    insert
    navigation
    additional
    shift
    todo
    heading))
 :config
 (require 'evil-org-agenda)
 :diminish evil-org-mode)
#+END_SRC

*** Bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
 :after org
 :hook
 (org-mode . org-bullets-mode))
#+END_SRC

** LSP
*** Mode

Setup [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]].

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
 :after (general projectile)
 :commands (lsp)
 :init
 ;; Uncomment to inspect communication between client and the server
 (setq lsp-print-io t)
 (setq lsp-prefer-flymake nil)
 :config
 (nmap
  :prefix my/leader
  "l r" 'lsp-restart-workspace)
 :delight "lsp")
#+END_SRC

*** LSP UI

#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
 :after (lsp-mode)
 :commands (lsp-ui-mode general)
 :init
 (setq-default
  lsp-ui-doc-frame-parameters
  '((left . -1)
    (top . -1)
    (no-accept-focus . t)
    (min-width . 0)
    (width . 0)
    (min-height . 0)
    (height . 0)
    (internal-border-width . 5)
    (vertical-scroll-bars)
    (horizontal-scroll-bars)
    (left-fringe . 0)
    (right-fringe . 0)
    (menu-bar-lines . 0)
    (tool-bar-lines . 0)
    (line-spacing . 0.1)
    (unsplittable . t)
    (undecorated . t)
    (minibuffer . nil)
    (visibility . nil)
    (mouse-wheel-frame . nil)
    (no-other-frame . t)
    (cursor-type)
    (no-special-glyphs . t)
    (visual-line-mode . -1)))
 :config
 (add-hook 'lsp-mode-hook 'lsp-ui-mode)
 (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
 (add-hook 'lsp-ui-doc-frame-hook
  (lambda (frame _w)
    (set-face-attribute 'default frame :font "Fira Code" :height 110)))
 (setq
  lsp-ui-sideline-enable nil
  lsp-enable-completion-at-point t
  lsp-ui-doc-position 'bottom
  ; lsp-ui-doc-position 'at-point
  lsp-ui-doc-header nil
  lsp-ui-doc-enable nil
  lsp-ui-doc-delay 0.5
  lsp-ui-doc-use-webkit nil
  ;; lsp-ui-doc-max-width 160
  ;; lsp-ui-doc-max-height 20
  ;; lsp-ui-doc-use-childframe t
  lsp-ui-doc-include-signature t
  lsp-ui-doc-border "#222"
  ;; lsp-ui-flycheck-enable t
  lsp-ui-peek-fontify nil
  lsp-ui-peek-expand-function (lambda (xs) (mapcar #'car xs)))
 (nmap 'haskell-mode-map
   :prefix my/leader
   "t d" 'lsp-ui-doc-mode
   "t S" 'lsp-ui-sideline-mode)
 (general-def 'lsp-ui-peek-mode-map
   "h" 'lsp-ui-peek--select-next-file
   "l" 'lsp-ui-peek--select-prev-file
   "j" 'lsp-ui-peek--select-next
   "k" 'lsp-ui-peek--select-prev))
#+END_SRC

*** Company LSP

#+BEGIN_SRC emacs-lisp
(use-package company-lsp
 :after (lsp-mode company)
 ;; :quelpa
 ;; (company-lsp :fetcher github :repo "tigersoldier/company-lsp")
 :commands (company-lsp)
 :init
 (setq
  ;; Don't filter results on the client side
  company-transformers nil
  company-lsp-cache-candidates 'auto
  company-lsp-async t
  company-lsp-enable-snippet t)
 :config
 (push 'company-lsp company-backends))
#+END_SRC


*** Treemacs

#+BEGIN_SRC emacs-lisp
(use-package lsp-treemacs
 :after (general)
 :commands lsp-treemacs-errors-list
 :config
 (nmap
   :prefix my/leader
   "e t" 'lsp-treemacs-errors-list))
#+END_SRC

** Languages
*** Lisp

#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :ensure nil
  :config
  (put 'use-package 'lisp-indent-function 1)
  (put 'add-hook 'lisp-indent-function 1))
#+END_SRC

*** Emacs Lisp
**** Mode

#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
 :after (general company smartparens)
 :ensure nil
 :config
 (nmap 'emacs-lisp-mode-map
  "M-." 'find-function-at-point
  "M-," 'find-variable-at-point)
 (add-to-list 'company-backends 'company-elisp)
 (sp-with-modes 'emacs-lisp-mode
   (sp-local-pair "'" nil :actions nil)))
#+END_SRC

**** Refs

#+BEGIN_SRC emacs-lisp
(use-package elisp-refs
  :after elisp-mode)
#+END_SRC

**** Macrostep

#+BEGIN_SRC emacs-lisp
(use-package macrostep
 :after elisp-mode
 :demand t
 :commands macrostep-expand
 :mode ("\\*.el\\'" . emacs-lisp-mode)
 :config
 ;; support Macrostep in Evil mode
 (general-define-key
  :keymaps 'macrostep-keymap
  "q" 'macrostep-collapse-all
  "e" 'macrostep-expand)
 (nmap
   :keymaps 'emacs-lisp-mode-map
   :prefix my/leader
   "m e" 'macrostep-expand))
#+END_SRC

*** Haskell
**** Hasklig (ligatures)

#+BEGIN_SRC emacs-lisp
(use-package hasklig-mode
 :hook (haskell-mode)
 :delight "hl")
#+END_SRC

**** Mode

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
 :after
 (general company eldoc)
 ;; :quelpa
 ;; (haskell-mode :fetcher github :repo "haskell/haskell-mode")
 ;; :mode
 ;; (("\\.hs\\(c\\|-boot\\)?\\'" . haskell-mode)
 ;; ("\\.lhs\\'" . literate-haskell-mode)
 ;; ("\\.cabal\\'" . haskell-cabal-mode))
 :commands
 (haskell-compile-cabal-build-command
  haskell-interactive-mode-map)
 :preface
 (defun my/haskell-mode/setup ()
   (interactive)
   (setq buffer-face-mode-face '(:family "Hasklig"))
   (buffer-face-mode)
   ;; Treat symbol (e.g. "_") as a word
   (defalias 'forward-evil-word 'forward-evil-symbol)
   ;; (subword-mode 1)
   ;; (eldoc-overlay-mode)       ; annoying
   ;; (haskell-indentation-mode) ; hi2 ftw
   ;; There are some tools that dont't work with unicode symbols
   ;; I use Hasklig instead
   ;; (turn-on-haskell-unicode-input-method)
   ;; Affects haskell-indentation-mode
   (setq-local evil-auto-indent nil)
   (face-remap-add-relative
    'font-lock-doc-face
    'font-lock-comment-face))
 (defvar haskell-process-use-ghci nil)
 (defun my/haskell-mode/toggle-process-type ()
   "Toggle GHCi process between cabal and ghci"
   (interactive)
   (if haskell-process-use-ghci
       (progn
         ;; You could set it to "cabal-repl" if
         ;; you're using the old cabal workflow
         (setq haskell-process-type 'cabal-new-repl)
         (setq haskell-process-use-ghci nil)
         (message "Using cabal new-repl"))
     (progn
       (setq haskell-process-type 'stack-ghci)
       (setq haskell-process-use-ghci t)
       (message "Using stack ghci"))))
 (defun my/haskell-mode/show-process-log ()
   "Display *haskell-process-log* buffer in other window"
   (interactive)
   (switch-to-buffer-other-window "*haskell-process-log*"))
 :hook
 (haskell-mode . my/haskell-mode/setup)
 :init
 (setq
  ;; Enable debug logging to *haskell-process-log* buffer
  haskell-process-log t
  ;; Don't generate tags via hasktags after saving
  haskell-tags-on-save nil
  ;; Don't run stylish-haskell on the buffer before saving
  ;; something it just inserts a bunch of spaces at the end of the line for no reason
  haskell-stylish-on-save nil
  ;; Don't show debugging tips when starting the process
  haskell-process-show-debug-tips nil
  ;; Don't suggest removing import lines as warned by GHC
  haskell-process-suggest-remove-import-lines nil
  ;; Don't suggest adding packages to .cabal file
  haskell-process-suggest-add-package nil
  ;; Don't suggest restarting the f*****g process
  haskell-process-suggest-restart nil
  ;; Don't suggest adding the OverloadedStrings extensions
  haskell-process-suggest-overloaded-strings nil
  ;; Auto import the modules reported by GHC to have been loaded
  haskell-process-auto-import-loaded-modules t
  ;; Don't popup errors in a separate buffer
  haskell-interactive-popup-errors nil
  ;; Make haskell-process-log look better
  haskell-process-args-ghci '("-ferror-spans" "-fshow-loaded-modules")
  haskell-process-args-cabal-repl '("--ghc-options=-fdiagnostics-color=never")
  haskell-process-args-stack-ghci '("--ghci-options=-ferror-spans -fshow-loaded-modules" "--no-build" "--no-load")
  haskell-process-args-cabal-new-repl '("--ghc-options=-fdiagnostics-color=never")
  ;; Use "cabal new-repl" as the inferior haskell process
  haskell-process-type 'cabal-new-repl
  ;; haskell-process-args-stack-ghci '("--ghci-options=-ferror-spans")
  ;; Use "stack build" as the default build command
  ;; haskell-compile-cabal-build-command "stack build --no-library-profiling"
  haskell-compile-cabal-build-command "cd %s && make build"
)
 :config
 ;; Common key bindings
 (nmap '(haskell-mode-map haskell-cabal-mode-map haskell-interactive-mode-map)
   "C-c C-b" 'haskell-compile
   "C-c C-k" 'haskell-interactive-mode-kill
   "C-c C-r" 'haskell-process-restart
   "C-c C-d" 'haskell-cabal-add-dependency
   "C-c C-l" 'haskell-interactive-mode-clear
   "C-c C-h" 'haskell-hoogle
   "C-c SPC" 'haskell-session-change-target
   "C-c C-c" 'my/haskell-mode/show-process-log)
 (nmap '(haskell-mode-map haskell-cabal-mode-map)
   "C-c C-j" 'haskell-interactive-switch)
 (nmap '(haskell-mode-map haskell-interactive-mode-map)
   "C-c c v" 'haskell-cabal-visit-file
   "C-c c b" 'haskell-process-cabal-build
   "C-c c r" 'haskell-process-cabal)
 (nmap 'haskell-compilation-mode-map
   "C-k" 'windmove-up ;; bind it back
   "M-k" 'compilation-previous-error
   "M-j" 'compilation-next-error)
 (nmap 'haskell-mode-map
   "C-c T" 'my/haskell-mode/toggle-process-type
   "C-c H" 'haskell-hayoo
   "C-c C-m" 'haskell-auto-insert-module-template
   "C-c ." 'haskell-hide-toggle
   "C-c C-o" 'haskell-process-load-file
   "C-c C-SPC" 'haskell-interactive-copy-to-prompt
   "C-c C-f" 'haskell-mode-stylish-buffer
   "C-c C-t" 'haskell-process-do-type
   "C-c C-i" 'haskell-process-do-info
   ;; Hit it repeatedly to jump between groups of imports
   "C-c C-u" 'haskell-navigate-imports)
 (require 'haskell-interactive-mode)
 (unbind-key "C-j" haskell-interactive-mode-map)
 (nmap 'haskell-interactive-mode-map
   "C-c C-j" 'haskell-interactive-switch-back)
 (imap 'haskell-interactive-mode-map
   "C-c C-l" 'haskell-interactive-mode-clear)
 :delight "hs")
#+END_SRC

**** Hi2

#+BEGIN_SRC emacs-lisp
(use-package hi2
 :after haskell-mode
 :init
 (setq
  hi2-layout-offset 2
  hi2-left-offset 2
  hi2-where-post-offset 2)
 :config
 (put 'hi2-where-post-offset 'safe-local-variable 'numberp)
 (put 'hi2-left-offset 'safe-local-variable 'numberp)
 (put 'hi2-layout-offset 'safe-local-variable 'numberp)
 (imap
   'hi2-mode-map
   "<tab>" 'hi2-indent-line)
 :diminish hi2-mode)
#+END_SRC

**** Hindent

Bear in mind that it doesn't support unicode syntax so all your cool unicode
operators will be replaced.

#+BEGIN_SRC emacs-lisp
(use-package hindent
 :after (general haskell-mode)
 :hook
 (haskell-mode . hindent-mode)
 :config
 ;; "r" - reformat
 (vmap 'haskell-mode-map
   "C-c r" 'hindent-reformat-region)
 (nmap 'haskell-mode-map
   "C-c r" 'hindent-reformat-buffer
   "C-c R" 'hindent-reformat-decl)
 :diminish hindent-mode)
#+END_SRC

**** Company-cabal

#+BEGIN_SRC emacs-lisp
(use-package company-cabal
 :after haskell-mode
 :config
 (add-to-list 'company-backends 'company-cabal))
#+END_SRC

**** Hasky-stack

#+BEGIN_SRC emacs-lisp
(use-package hasky-stack
 :after (general haskell-mode)
 :config
 (nmap 'haskell-mode-map
   :prefix my/leader
   "h s" 'hasky-stack-execute
   "h n" 'hasky-stack-new))
#+END_SRC

**** Hasky-extensions

#+BEGIN_SRC emacs-lisp
(use-package hasky-extensions
 :after (general haskell-mode)
 :config
 (nmap 'haskell-mode-map
   :prefix my/leader
   "h e" 'hasky-extensions
   "h d" 'hasky-extensions-browse-docs))
#+END_SRC

**** LSP

#+BEGIN_SRC emacs-lisp
(use-package lsp-haskell
 :init
 (setq lsp-haskell-set-completion-snippets-on t)
 :config
 (add-hook 'haskell-mode-hook #'lsp))
#+END_SRC

*** PureScript
**** Mode

The PureScript mode.

#+BEGIN_SRC emacs-lisp
(use-package purescript-mode
 :after (general files)
 :if (executable-find "purs")
 :load-path (lambda () (my/emacs-path "purescript-mode"))
 :ensure nil
 :preface
 (defvar my/purescript/path
  (my/emacs-path "purescript-mode"))
 (defun my/purescript-emmet ()
   (interactive)
   (let ((start (point))
         (end (save-excursion (beginning-of-line-text) (point))))
     (call-process-region start end "purescript-emmet" t t)))
 :config
 (require 'purescript-mode-autoloads)
 (add-to-list 'Info-default-directory-list my/purescript/path)
 (imap 'purescript-mode-map
   "C-c C-e" 'my/purescript-emmet))
#+END_SRC

A new, simple purescript mode for cheap syntax highlighting.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package purescript-mode
 :quelpa (purescript-mode :fetcher github :repo "justinwoo/new-purescript-mode"))
#+END_SRC

**** PSC IDE

#+BEGIN_SRC emacs-lisp
(use-package psc-ide
 :after (general purescript-mode)
 :commands (psc-ide-mode)
 :preface
 (defun my/psc-ide/setup ()
   (setq-local evil-auto-indent nil)
   (psc-ide-mode)
   (turn-on-purescript-unicode-input-method)
   (turn-on-purescript-indentation))
 :hook
 (purescript-mode . my/psc-ide/setup)
 :init
 ;; use the psc-ide server that is
 ;; relative to npm bin directory
 (setq psc-ide-use-npm-bin t)
 :config
 (general-define-key
  :states 'normal
  :keymaps 'psc-ide-mode-map
  "C-t" 'psc-ide-goto-definition
  "C-]" 'psc-ide-goto-definition
  "g d" 'psc-ide-goto-definition)
 :delight "psc-ide")
#+END_SRC

**** PSCI

#+BEGIN_SRC emacs-lisp :tangle no
(use-package psci
 :disabled
 :after purescript-mode
 :hook
 (purescript-mode . inferior-psci-mode)
 :delight "psci")
#+END_SRC

*** Idris

#+BEGIN_SRC emacs-lisp
(use-package idris-mode
 :custom
 (idris-repl-banner-functions '(idris-repl-text-banner))
 (idris-repl-prompt-style 'short)
 :hook
 (idris-mode . enable-idris-pretty-symbols))
#+END_SRC

*** Nix

#+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :after (general)
  :mode ("\\.nix\\'" "\\.nix.in\\'")
  :config
  (nmap 'nix-mode-map
   "C-c r" 'nix-format-buffer)
  :delight "nix")
(use-package nix-drv-mode
  :ensure nix-mode
  :mode "\\.drv\\'")
(use-package nix-shell
  :ensure nix-mode
  :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
(use-package nix-repl
  :ensure nix-mode
  :commands (nix-repl))
#+END_SRC

**** Helpers

Predicate function that checks if we inside a =nix-shell=.
See my config for Ocaml for the usage example.

#+BEGIN_SRC emacs-lisp
(defun my/in-nix-shell-p ()
  (string-equal (getenv "IN_NIX_SHELL") "1"))
#+END_SRC

#+RESULTS:
: in-nix-shell-p

*** Ocaml

Nix(OS)-specific.
The main idea is [[https://blog.jethro.dev/blog/ocaml_with_nix/][described here.]]

**** Variables

#+BEGIN_SRC emacs-lisp
(defconst my/merlin-site-elisp (getenv "MERLIN_SITE_LISP"))
(defconst my/utop-site-elisp (getenv "UTOP_SITE_LISP"))
(defconst my/ocp-site-elisp (getenv "OCP_INDENT_SITE_LISP"))
#+END_SRC

**** Utop

https://github.com/diml/utop#integration-with-emacs

#+BEGIN_SRC emacs-lisp
(use-package utop
 :if (and my/utop-site-elisp (my/in-nix-shell-p))
 :load-path my/utop-site-elisp
 :commands
 (utop-command)
 :config
 (setq utop-command "opam config exec utop -- -emacs")
 :hook
 ((tuareg-mode reason-mode) . utop-minor-mode))
#+END_SRC

**** Merlin

Context sensitive completion for OCaml. Provides modern IDE features.
Implements a minor-mode that is supposed to be used on top of =tuareg-mode=.

See the [[https://github.com/ocaml/merlin][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package merlin
 :after (company)
 :if (and my/merlin-site-elisp (my/in-nix-shell-p))
 :load-path my/merlin-site-elisp
 :init
 ;; Disable merlin's own error checking
 ;; We'll use flycheck-ocaml for that
 (setq
  merlin-error-after-save nil
  merlin-command "/run/current-system/sw/bin/ocamlmerlin")
 :config
 (add-to-list 'company-backends 'merlin-company-backend)
 :hook
 ((tuareg-mode caml-mode) . merlin-mode))
#+END_SRC

**** Tuareg

[[https://github.com/ocaml/tuareg][Tuareg]] is an Emacs OCaml mode.

Provides:
- Syntax highlighting.
- REPL (aka =toplevel=).
- Ocaml debugger within Emacs.

Usage:
- Start the OCaml REPL with ~M-x run-ocaml~.
- Run the OCaml debugger with ~M-x ocamldebug FILE~.

#+BEGIN_SRC emacs-lisp
(use-package tuareg
 :init
 (setq tuareg-match-patterns-aligned t)
 :delight "ocaml")
#+END_SRC

**** Indentation

#+BEGIN_SRC emacs-lisp
(use-package ocp-indent
 :if (and my/ocp-site-elisp (my/in-nix-shell-p))
 :load-path my/ocp-site-elisp)
#+END_SRC

**** Dune

A [[https://github.com/ocaml/dune][composable build system]] for OCaml.

#+BEGIN_SRC emacs-lisp
(use-package dune)
#+END_SRC

**** Flycheck

OCaml support for Flycheck using Merlin.

#+BEGIN_SRC emacs-lisp
(use-package flycheck-ocaml
 :after (flycheck merlin)
 :commands
 (flycheck-ocaml-setup)
 :config
 (with-eval-after-load 'merlin
   ;; Enable flycheck checker
   (flycheck-ocaml-setup)))
#+END_SRC

*** Coq

#+BEGIN_SRC emacs-lisp
(use-package proof-site
 :load-path "lisp/PG/generic"
 :custom
 (proof-delete-empty-windows t)
 ;; see: https://github.com/ProofGeneral/PG/issues/404
 ;; (proof-shrink-windows-tofit t)
 :config
 (custom-set-faces
  '(proof-queue-face ((t (:foreground "#eee"))))
  '(proof-locked-face ((t (:background "#001800" :foreground "#00aa00"))))
  '(proof-locked-face ((t (:background "#002255" ))))
  '(proof-mouse-highlight-face  ((t (:background "#555" :foreground "#fff")))))
 :delight "coq")

(use-package coq-mode
 :after (proof-site)
 :ensure nil
 :commands (coq-mode)
 :preface
 (defun my/company-coq/setup ()
   (interactive)
   (setq buffer-face-mode-face '(:family "Symbola"))
   (buffer-face-mode)
   (setq-local
    prettify-symbols-alist
    '((":=" . ?≜)
      ("Proof." . ?∵)
      ("Qed." . ?■)
      ("Defined." . ?□)
      ("Alpha" . ?Α) ("Beta" . ?Β) ("Gamma" . ?Γ)
      ("Delta" . ?Δ) ("Epsilon" . ?Ε) ("Zeta" . ?Ζ)
      ("Eta" . ?Η) ("Theta" . ?Θ) ("Iota" . ?Ι)
      ("Kappa" . ?Κ) ("Lambda" . ?Λ) ("Mu" . ?Μ)
      ("Nu" . ?Ν) ("Xi" . ?Ξ) ("Omicron" . ?Ο)
      ("Pi" . ?Π) ("Rho" . ?Ρ) ("Sigma" . ?Σ)
      ("Tau" . ?Τ) ("Upsilon" . ?Υ) ("Phi" . ?Φ)
      ("Chi" . ?Χ) ("Psi" . ?Ψ) ("Omega" . ?Ω)
      ("alpha" . ?α) ("beta" . ?β) ("gamma" . ?γ)
      ("delta" . ?δ) ("epsilon" . ?ε) ("zeta" . ?ζ)
      ("eta" . ?η) ("theta" . ?θ) ("iota" . ?ι)
      ("kappa" . ?κ) ("lambda" . ?λ) ("mu" . ?μ)
      ("nu" . ?ν) ("xi" . ?ξ) ("omicron" . ?ο)
      ("pi" . ?π) ("rho" . ?ρ) ("sigma" . ?σ)
      ("tau" . ?τ) ("upsilon" . ?υ) ("phi" . ?φ)
      ("chi" . ?χ) ("psi" . ?ψ) ("omega" . ?ω)))
   (sp-local-pair 'coq-mode "'" nil :actions nil))
 :init
 (setq
  ;; Enable autocompletion for theorem names and
  ;; symbols defined in the libraries we load
  company-coq-live-on-the-edge t
  company-coq-disabled-features '()
  company-coq-dynamic-autocompletion t)
 :hook
 (coq-mode . my/company-coq/setup))

(use-package company-coq
 :after (proof-site coq-mode)
 :commands (company-coq-mode)
 :hook
 (coq-mode . company-coq-mode))
#+END_SRC

*** Merlin eldoc

Automatically (without using keybindings) provide information for the value
under point in OCaml and ReasonML files.

#+BEGIN_SRC emacs-lisp
(use-package merlin-eldoc
 :after merlin
 :custom
 (eldoc-echo-area-use-multiline-p t)   ; Use multiple lines when necessary
 (merlin-eldoc-max-lines 8)            ; But not more than 8
 (merlin-eldoc-type-verbosity 'min)    ; Don't display verbose types
 (merlin-eldoc-function-arguments nil) ; Don't show function arguments
 (merlin-eldoc-doc nil)                ; Don't show the documentation
 :config
 (nmap 'merlin-mode-map
   :prefix my/leader
   "m p" 'merlin-eldoc-jump-to-prev-occurrence
   "m n" 'merlin-eldoc-jump-to-next-occurrence)
 :hook
 ((tuareg-mode reason-mode) . merlin-eldoc-setup))
#+END_SRC

*** Reason

#+BEGIN_SRC emacs-lisp
(use-package reason-mode
 :quelpa
 (reason-mode :repo "reasonml-editor/reason-mode" :fetcher github :stable t)
 :config
 (add-hook
  'reason-mode-hook
  (lambda ()
    (setq utop-command "opam config exec -- rtop -emacs")
    (add-hook 'before-save-hook 'refmt-before-save)))
    (add-hook 'reason-mode-hook 'merlin-mode)
    (add-hook 'reason-mode-hook 'utop-minor-mode)
    (add-hook 'reason-mode-hook 'flycheck-mode)
    :delight "re")
#+END_SRC

*** SML

#+BEGIN_SRC emacs-lisp
(use-package sml-mode
 :quelpa (sml-mode :fetcher github :repo "emacsmirror/sml-mode")
 :mode "\\.sml$")
#+END_SRC

*** Scheme

#+BEGIN_SRC emacs-lisp
(use-package geiser
 :after general)

(use-package scheme
 :ensure nil
 :after (geiser)
 :preface
 (defun my/scheme/setup ()
   (geiser-mode t))
 :hook
 (scheme-mode . my/scheme/setup))

(use-package quack
 :after (scheme)
 :config
 (setq
  ;; use emacs-style fontification
  quack-fontify-style 'emacs))
#+END_SRC

*** Racket

#+BEGIN_SRC emacs-lisp
(use-package racket-mode
 :after
 (general
  smartparens
  org
  geiser)
 :if (executable-find "racket")
 :mode ("\\.rkt[dl]?\\'" . racket-mode)
 :interpreter ("racket" . racket-mode)
 :hook
 (racket-mode . smartparens-mode)
 :init
 (setq
  geiser-scheme-implementation 'racket
  racket-smart-open-bracket-enable t)
 :config
 (add-to-list 'org-babel-load-languages '(racket . t))
 (sp-local-pair 'racket-mode "'" nil :actions nil)
 (sp-local-pair 'racket-mode "`" nil :actions nil))
#+END_SRC

*** Clojure

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
 :after (general company org)
 :commands
 (define-clojure-indent
  put-clojure-indent)
 :mode
 (("\\.clj\\'" . clojure-mode)
  ("\\.edn\\'" . clojure-mode)
  ("\\.boot\\'" . clojure-mode)
  ("\\.cljs.*\\'" . clojure-mode))
 :init
 (setq inferior-lisp-program "lein repl")
 :config
 (add-to-list 'org-babel-load-languages '(clojure . t))
 (nmap 'clojure-mode-map
   :prefix my/leader
   "C s" 'cider-start-http-server
   "C r" 'cider-refresh
   "C u" 'cider-user-ns
   "C R" 'cider-restart)
 (define-clojure-indent (fact 1))
 (define-clojure-indent (facts 1)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode-extra-font-locking
 :after (clojure-mode)
 :init
 (font-lock-add-keywords
  nil
  '(("(\\(facts?\\)"
     (1 font-lock-keyword-face))
    ("(\\(background?\\)"
     (1 font-lock-keyword-face)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package cider
 :after (clojure-mode)
 :commands (cider-mode)
 :custom
 (cider-repl-result-prefix ";; => ")
 :init
 (setq
  ;; go right to the REPL buffer when it's finished connecting
  cider-repl-pop-to-buffer-on-connect t
  ;; when there's a cider error, show its buffer and switch to it
  cider-show-error-buffer t
  cider-auto-select-error-buffer t
  cider-repl-history-file "~/.emacs.d/cider-history"
  cider-repl-wrap-history t)
 :hook
 (clojure-mode . clojure-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package kibit-helper)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-clojure
  :after (flycheck clojure-mode)
  :commands
  (flycheck-clojure-setup)
  :config
  (eval-after-load 'flycheck '(flycheck-clojure-setup)))

(use-package flycheck-pos-tip
  :after (flycheck-clojure)
  :commands
  (flycheck-pos-tip-error-messages)
  :config
  (eval-after-load 'flycheck
    '(setq flycheck-display-errors-function #'flycheck-pos-tip-error-messages)))
#+END_SRC

*** Scala

#+BEGIN_SRC emacs-lisp
(use-package scala-mode
 :after (general)
 :if (executable-find "scala"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ensime
 :after (general scala-mode)
 :commands (ensime-mode)
 :init
 (setq
  ensime-server-version "2.0.0-SNAPSHOT"
  ensime-default-buffer-prefix "ENSIME-"
  ensime-startup-notification nil
  ensime-startup-snapshot-notification nil)
 :config
 (unbind-key "M-p" ensime-mode-map)
 (nmap 'scala-mode-map
   :prefix my/leader
   "s e" 'ensime)
 (nmap 'ensime-mode-map
   :prefix my/leader
   "r" 'ensime-inf-run-scala
   "s r" 'ensime-sbt-do-run
   "s c" 'ensime-sbt-do-compile)
 ;; looks like a perfect candidate for a Hydra?
 (nmap 'ensime-mode-map
   :prefix my/leader
   "s E" 'ensime-print-errors-at-point
   "s t" 'ensime-print-type-at-point
   "s o" 'ensime-import-type-at-point
   "s g" 'ensime-edit-definition-other-window
   "s ," 'ensime-pop-find-definition-stack
   "s ." 'ensime-edit-definition-of-thing-at-point))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package sbt-mode
 :after (general scala-mode)
 :if (executable-find "sbt")
 :init
 (setq sbt:program-name "sbt -mem 2048 -v")
 (setq-default truncate-lines nil)
 :config
 (nmap 'scala-mode-map
   :prefix my/leader
   "s" 'sbt-start
   "r" 'sbt-command
   "p" 'sbt-run-previous-command)
 (general-define-key
  :keymaps 'sbt-mode-map
  :states '(normal insert)
  "M-j" 'compilation-next-error
  "M-k" 'compilation-previous-error)
 (evil-set-initial-state 'sbt-mode 'normal))
#+END_SRC

*** Kotlin

#+BEGIN_SRC emacs-lisp
(use-package kotlin-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-kotlin
 :after (kotlin-mode flycheck)
 :commands
 (flycheck-kotlin-setup)
 :config
 (flycheck-kotlin-setup))
#+END_SRC

*** Rust

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
 :after (company general)
 :if (executable-find "rustc")
 :commands (rust-mode)
 :config
 ;; enable rust-mode for .lalrpop files
 (add-to-list 'auto-mode-alist '("\\.lalrpop\\'" . rust-mode))
 (general-define-key
  :keymaps 'rust-mode-map
  "TAB" 'company-indent-or-complete-common
  "C-c C-b" 'rust-compile
  "C-c <tab>" 'rust-format-buffer))
#+END_SRC

Some of key bindings are provided by ==evil-collection=.

#+BEGIN_SRC emacs-lisp
(use-package racer
 :after rust-mode
 :demand t
 :commands racer-mode
 :hook
 ((racer-mode . eldoc-mode)
  (racer-mode . company-mode)
  (rust-mode . racer-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package cargo
 :after (general rust-mode)
 :config
 (nmap 'rust-mode-map
   :prefix my/leader
   "c ." 'cargo-process-repeat
   "c c" 'cargo-process-clean
   "c b" 'cargo-process-build
   "c c" 'cargo-process-check
   "c d" 'cargo-process-doc
   "c e" 'cargo-process-bench
   "c f" 'cargo-process-current-test
   "c f" 'cargo-process-fmt
   "c i" 'cargo-process-init
   "c n" 'cargo-process-new
   "c o" 'cargo-process-current-file-tests
   "c s" 'cargo-process-search
   "c u" 'cargo-process-update
   "c x" 'cargo-process-run
   "c X" 'cargo-process-run-example
   "t" 'cargo-process-test))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-racer
 :after (racer company)
 :config
 (add-to-list 'company-backends 'company-racer))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-rust
  :config
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+END_SRC

*** Erlang
*** Elixir

#+BEGIN_SRC emacs-lisp
(use-package elixir-mode
 :preface
 (defun my/elixir-mode/setup ()
   (when (and
          (string-equal "exs" (file-name-extension buffer-file-name))
          (string-equal "mix" (file-name-base buffer-file-name)))
     (alchemist-hex-mode 1)))
 :hook
 ((elixir-mode . alchemist-mode)
  (elixir-mode . my/elixir-mode/setup))
 :init
 (use-package alchemist
   :demand t
   :init
   (setq
    alchemist-goto-elixir-source-dir "~/projects/github/elixir"
    alchemist-goto-erlang-source-dir "/usr/local/Cellar/erlang/19.2.3")
   :config
   ;; additional keybindings are here
   ;; https://github.com/emacs-evil/evil-collection/blob/master/evil-collection-alchemist.el
   (evil-define-key 'normal alchemist-mode-map
     (kbd "C-j") nil
     (kbd "C-k") nil
     (kbd "M-j") 'alchemist-goto-jump-to-next-def-symbol
     (kbd "M-k") 'alchemist-goto-jump-to-previous-def-symbol)
   (nmap 'alchemist-mode-map
     :prefix my/leader
     ;; elixir general key bindings
     "tt" 'alchemist-mix-test
     "tf" 'alchemist-project-run-tests-for-current-file
     "," 'alchemist-test-toggle-test-report-display
     "h" 'alchemist-help-search-at-point
     "H" 'alchemist-help
     "a" 'alchemist-project-toggle-file-and-tests
     "A" 'alchemist-project-toggle-file-and-tests-other-window
     "m" 'alchemist-mix
     ;; elixir IEx-specific key bindings
     "e" 'alchemist-iex-project-run
     "r" 'alchemist-iex-reload-module)
   (vmap 'alchemist-mode-map
     :prefix my/leader
     "e" 'alchemist-iex-send-current-line
     "E" 'alchemist-iex-send-current-line-and-go
     "r" 'alchemist-iex-send-region
     "R" 'alchemist-iex-send-region-and-go)
   ;; elixir HEX-specific key bindings
   (nmap 'alchemist-hex-mode-map
     :prefix my/leader
     "i" 'alchemist-hex-info-at-point
     "I" 'alchemist-hex-info
     "r" 'alchemist-hex-releases-at-point
     "R" 'alchemist-hex-releases
     "f" 'alchemist-hex-search)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package elixir-format
 :quelpa (elixir-format :fetcher github :repo "anildigital/mix-format.el")
 :preface
 (defun my/elixir-format/setup ()
   (add-hook 'before-save-hook 'elixir-format-before-save))
 :custom
 (elixir-format-mix-path "/usr/local/bin/mix")
 :hook
 (elixir-mode . my/elixir-format/setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-elixir
  :after (flycheck elixir-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-mix
 :after (flycheck elixir-mode)
 :commands
 (flycheck-mix-setup)
 :config
 (flycheck-mix-setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-dialyxir
 :after (flycheck elixir-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-credo
 :after (flycheck elixir-mode)
 :commands
 (flycheck-credo-setup)
 :config
 (flycheck-credo-setup))
#+END_SRC

*** Dhall

Idk how to prevent its popup to show up.
Also, it fails to validate =spago= dhall files for some reason.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package dhall-mode
 :custom
 (dhall-command (substitute-in-file-name "$HOME/.local/bin/dhall"))
 (dhall-format-command nil)
 (dhall-format-at-save t)
 :mode "\\.dhall\\'")
#+END_SRC

*** Terraform
**** Mode

#+BEGIN_SRC emacs-lisp
 (use-package terraform-mode
  :hook (terraform-mode . terraform-format-on-save-mode))
#+END_SRC

**** Company

#+BEGIN_SRC emacs-lisp
 (use-package company-terraform
  :after (terraform company)
  :commands
  (company-terraform-init)
  :config
  (company-terraform-init))
#+END_SRC

*** SQL

#+BEGIN_SRC emacs-lisp
(use-package format-sql
 :after (general)
 :config
 (vmap 'sql-mode-map
   "C-c R" 'format-sql-region)
 (nmap 'sql-mode-map
   "C-c r" 'format-sql-buffer))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package sqlup-mode
  :after (general)
  :hook
  ;; capitalize keywords in SQL mode
  ;; capitalize keywords in an interactive session (e.g. psql)
  ((sql-mode sql-interactive-mode) . sqlup-mode)
  :config
  (add-to-list 'sqlup-blacklist "name")
  (add-to-list 'sqlup-blacklist "public")
  (add-to-list 'sqlup-blacklist "state")
  (nmap
    :keymaps '(sql-mode-map sql-interactive-mode-map)
    :prefix my/leader
    "S u" 'sqlup-capitalize-keywords-in-region
    "S U" 'sqlup-capitalize-keywords-in-buffer))
#+END_SRC

*** Json

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.bowerrc$")
#+END_SRC

Other JSON-related packages.

#+BEGIN_SRC emacs-lisp
(use-package json-navigator)
(use-package json-reformat)
#+END_SRC

*** Yaml

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
 :config
 :delight "yaml")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-yamllint
 :after (flycheck yaml-mode)
 :commands
 (flycheck-yamllint-setup)
 :config
 (flycheck-yamllint-setup))
#+END_SRC

*** Markdown

#+BEGIN_SRC emacs-lisp :tangle no
(use-package markdown-mode
 :disabled
 :commands (markdown-mode gfm-mode)
 :mode
 (("README\\.md\\'" . gfm-mode)
  ("\\.md\\'" . markdown-mode)
  ("\\.markdown\\'" . markdown-mode))
 :init
 (setq markdown-command "multimarkdown")
 :delight "md")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode+
  :after markdown-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package gh-md
 :after (general markdown-mode)
 :config
 (nmap 'markdown-mode-map
   :prefix my/leader
   "m r" 'gh-md-render-region
   "m b" 'gh-md-render-buffer))
#+END_SRC

*** Emmet

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
 :after (general sgml-mode)
 :commands
 emmet-mode
 :hook
 ((sgml-mode ; auto-start on any markup modes
   css-mode  ; enable css abbreviation
   html-mode
   jade-mode) . emmet-mode)
 :config
 (imap
   "C-x C-o" 'emmet-expand-line)
 :delight "emmet")
#+END_SRC

*** Tex

#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Prolog

#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Python

#+BEGIN_SRC emacs-lisp
(use-package python-mode
 :preface
 (defun my/python-mode/setup ()
   (mapc (lambda (pair) (push pair prettify-symbols-alist))
         '(("def" . "𝒇")
           ("class" . "𝑪")
           ("and" . "∧")
           ("or" . "∨")
           ("not" . "￢")
           ("in" . "∈")
           ("not in" . "∉")
           ("return" . "⟼")
           ("yield" . "⟻")
           ("for" . "∀")
           ("!=" . "≠")
           ("==" . "＝")
           (">=" . "≥")
           ("<=" . "≤")
           ("[]" . "⃞")
           ("=" . "≝"))))
 :hook
 (python-mode . my/python-mode/setup))
#+END_SRC

*** Ruby

#+BEGIN_SRC emacs-lisp
(use-package inf-ruby
 :hook
 ;; automatically switch from common ruby compilation modes
 ;; to interact with a debugger
 (compilation-filter . inf-ruby-auto-enter)
 ;; required to use binding.pry or byebug
 (after-init . inf-ruby-switch-setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package robe
 :after (company)
 :hook
 (ruby-mode . robe-mode)
 :config
 (add-to-list 'company-backends 'company-robe)
 :delight "robe")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package rubocop
 :after (robe)
 :hook
 (ruby-mode . rubocop-mode)
 :delight "rcop")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package bundler
 :after general
 :config
 (nmap 'ruby-mode-map
   :prefix my/leader
   "b i" 'bundle-install
   "b c" 'bundle-console
   "b o" 'bundle-outdated
   "b u" 'bundle-update
   "b e" 'bundle-exec))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package rbenv
 :commands
 (global-rbenv-mode)
 :preface
 (defun my/rbenv/modeline (current-ruby)
   (append
    '(" ruby [")
    (list (propertize current-ruby 'face 'rbenv-active-ruby-face))
    '("]")))
 :hook
 (ruby-mode . rbenv-use-corresponding)
 :init
 (setq rbenv-modeline-function 'my/rbenv/modeline)
 :config
 (global-rbenv-mode)
 (nmap 'ruby-mode-map
   :prefix "C-c R"
   "c" 'rbenv-use-corresponding
   "u" 'rbenv-use))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package rake
 :after (general projectile)
 :init
 (setq rake-completion-system projectile-completion-system)
 :config
 (nmap 'ruby-mode-map
   :prefix my/leader
   "r" 'rake))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package rspec-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package projectile-rails
 :after projectile
 :commands
 (projectile-rails-global-mode)
 :init
 (setq
  projectile-rails-vanilla-command "bin/rails"
  projectile-rails-spring-command "bin/spring"
  projectile-rails-zeus-command "bin/zeus")
 :config
 (projectile-rails-global-mode)
 :diminish)
#+END_SRC

*** Java

#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Web
**** Mode

#+BEGIN_SRC emacs-lisp
(use-package web-mode
 :mode
 (("\\.html?\\'" . web-mode)
  ("\\.html\\.erb\\'" . web-mode)
  ("\\.erb\\'" . web-mode)
  ("\\.djhtml\\'" . web-mode)
  ("\\.tsx\\'" . web-mode)
  ("\\.jsx\\'" . web-mode)
  ("\\.mustache\\'" . web-mode)
  ("\\.jinja\\'" . web-mode)

  ("\\.css\\'" . web-mode)
  ("\\.scss\\'" . web-mode)

  ("\\.[agj]sp\\'" . web-mode)
  ("\\.as[cp]x\\'" . web-mode)
  ("\\.as\\'" . web-mode)

  ("\\.phtml\\'" . web-mode)
  ("\\.tpl\\.php\\'" . web-mode)
  ("\\.php\\'" . web-mode))

 :init
 (setq
  ;; indent HTML automatically
  web-mode-indent-style 2
  ;; offsets
  web-mode-markup-indent-offset 2
  web-mode-css-indent-offset 2
  web-mode-code-indent-offset 2

  web-mode-engines-alist
  '(("\\.jinja\\'"  . "django")
    ("php" . "\\.php[3-5]?"))

  web-mode-enable-auto-pairing t
  web-mode-enable-css-colorization t
  web-mode-enable-current-element-highlight t
  web-mode-enable-current-column-highlight nil))
#+END_SRC

**** Company

#+BEGIN_SRC emacs-lisp
(use-package company-web
 :after company
 :demand t)
#+END_SRC

*** Styling
**** CSS mode

#+BEGIN_SRC emacs-lisp
(use-package css-mode)
#+END_SRC

**** LSP-CSS

#+BEGIN_SRC emacs-lisp

#+END_SRC

**** SCSS mode

#+BEGIN_SRC emacs-lisp
(use-package scss-mode
 :config
 :delight "scss")
#+END_SRC

*** Go

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :after (company flycheck)
  :if (executable-find "go")
  :preface
  (defun my/go-mode/setup ()
    (add-hook 'before-save-hook 'gofmt-before-save)
    (add-hook 'go-mode-hook 'flycheck-mode)
    (setq-default)
    (setq standard-indent 8)
    (setq tab-width 8)
    (setq indent-tabs-mode 1))
  :mode "\\.go\\'"
  :hook
  (go-mode . my/go-mode/setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company-go
 :after (company go-mode)
 :hook
 (go-mode . company-mode)
 :config
 (add-to-list 'company-backends 'company-go))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package go-stacktracer)

(use-package go-add-tags)

(use-package go-eldoc
 :hook
 (go-mode . go-eldoc-setup))

(use-package go-gopath)

(use-package go-direx)

(use-package gotest)

(use-package go-playground)
#+END_SRC

*** TypeScript

#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Flow

#+BEGIN_SRC emacs-lisp

#+END_SRC

*** JavaScript
**** tern

#+BEGIN_SRC emacs-lisp
(use-package tern
 :commands
 (tern-mode)
 :config
 ;; enable js completion between <script>...</script> etc
 (defadvice company-tern (before web-mode-set-up-ac-sources activate)
   "Set `tern-mode' based on current language before running company-tern."
   (message "advice")
   (if (equal major-mode 'web-mode)
       (let ((web-mode-cur-language (web-mode-language-at-pos)))
         (if (or (string= web-mode-cur-language "javascript")
                 (string= web-mode-cur-language "jsx"))
             (unless tern-mode (tern-mode))
           (if tern-mode (tern-mode -1)))))))
#+END_SRC

**** npm

#+BEGIN_SRC emacs-lisp
(use-package npm-mode
 :commands
 (npm-mode npm-global-mode)
 :config
 (npm-global-mode)
 :diminish npm-mode)
#+END_SRC

**** js2

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
 :init
 ;; indent step is 2 spaces
 (setq-default js2-basic-offset 2)
 (setq-default js-indent-level 2)
 (setq
  ;; configure indentation
  js2-enter-indents-newline t
  js2-auto-indent-p t
  ;; Idle timeout before reparsing buffer
  js2-idle-timer-delay 0.5
  ;; disable error parsing in favor of Flycheck
  js2-strict-missing-semi-warning nil)
 :commands js2-mode
 :config
 (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
 :delight "js2")
#+END_SRC

**** eslintd-fix

A very fast JS linter and fixer.

#+BEGIN_SRC emacs-lisp
(use-package eslintd-fix
 :hook
 (tide-mode . eslintd-fix-mode))
#+END_SRC

**** xref-js2

Jump to references/definitions using ag & js2-mode's AST.
See the [[https://github.com/NicolasPetton/xref-js2][repo]] for details.

#+BEGIN_SRC emacs-lisp
(use-package xref-js2
 :preface
 (defun my/xref-js2/add-backend ()
   (add-hook 'xref-backend-functions
             'xref-js2-xref-backend nil t))
 :hook
 (js2-mode . my/xref-js2/add-backend)
 :config
 (unbind-key "M-." js2-mode-map))
#+END_SRC

**** js2-refactor

A JavaScript refactoring library.

#+BEGIN_SRC emacs-lisp
(use-package js2-refactor
 :commands
(js2r-add-keybindings-with-prefix)
 :hook
 (js2-mode . js2-refactor-mode)
 :config
 ;; enable minor mode for js refactoring
 ;; see: https://github.com/magnars/js2-refactor.el#refactorings
 (js2r-add-keybindings-with-prefix "C-c C-j"))
#+END_SRC

**** rjxs-mode

#+BEGIN_SRC emacs-lisp
(use-package rjsx-mode
 :commands rjsx-mode
 :config
 (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode)))
#+END_SRC

**** TODO LSP

Typescript LSP support.

#+BEGIN_SRC emacs-lisp
#+END_SRC

Flow LSP support.

#+BEGIN_SRC emacs-lisp
#+END_SRC

**** prettier

#+BEGIN_SRC emacs-lisp
(use-package prettier-js
 :hook
 ((js2-mode-hook web-mode-hook) . prettier-js-mode)
 :delight "pr")
#+END_SRC

**** GraphQL

#+BEGIN_SRC emacs-lisp
(use-package graphql-mode
 :mode "\\.graphql\\'"
 :custom
 (graphql-url "http://localhost:8000/api/graphql/query"))
#+END_SRC

**** company-tern

#+BEGIN_SRC emacs-lisp
(use-package company-tern
 :after (company tern)
 :demand t
 :custom
 (company-tern-meta-as-single-line t)
 :config
 (add-to-list 'company-backends 'company-tern))
#+END_SRC

*** Vue

#+BEGIN_SRC emacs-lisp
(use-package vue-mode)
#+END_SRC

*** Elm

#+BEGIN_SRC emacs-lisp
(use-package elm-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package flycheck-elm
 :after (elm-mode flycheck)
 :hook
 (flycheck-mode . flycheck-elm-setup))
#+END_SRC

*** Nginx

#+BEGIN_SRC emacs-lisp
(use-package nginx-mode)
#+END_SRC

*** D

#+BEGIN_SRC emacs-lisp
(use-package d-mode)
#+END_SRC

*** Octave

#+BEGIN_SRC emacs-lisp
(use-package octave
 :after general
 :ensure nil
 :mode ("\.m$" . octave-mode))
#+END_SRC

*** Toml

#+BEGIN_SRC emacs-lisp
(use-package toml-mode)
#+END_SRC

*** Bison

#+BEGIN_SRC emacs-lisp
(use-package bison-mode)
#+END_SRC

*** Pug

#+BEGIN_SRC emacs-lisp
(use-package pug-mode)
#+END_SRC

*** Jade

#+BEGIN_SRC emacs-lisp
(use-package jade-mode)
#+END_SRC

*** Lua

#+BEGIN_SRC emacs-lisp
(use-package lua-mode
 :mode "\\.lua\\'"
 :init
 (setq lua-indent-level 2))

(use-package lua-block
 :after lua-mode
 :quelpa
 (lua-block
  :fetcher url
  :url "http://www.emacswiki.org/emacs/download/lua-block.el")
 :init
 (autoload 'lua-block-mode "lua-block" nil t)
 :delight "lb")
#+END_SRC

*** Haml

#+BEGIN_SRC emacs-lisp
(use-package haml-mode)
#+END_SRC

*** Slim

#+BEGIN_SRC emacs-lisp
(use-package slim-mode
 :delight "slim")
#+END_SRC

*** Robots.txt

#+BEGIN_SRC emacs-lisp
(use-package robots-txt-mode)
#+END_SRC

*** Dotenv

#+BEGIN_SRC emacs-lisp
(use-package dotenv-mode
 :config
 (add-to-list 'auto-mode-alist '("\\.env\\..*\\'" . dotenv-mode)))
#+END_SRC

*** CSV

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
 :mode "\\.[Cc][Ss][Vv]$"
 :init
 (setq
  ;; default separators for CSV files.
  csv-separators '("," ";" "|" " " "\t")
  ;; number of lines to consider part of header.
  csv-header-lines 1))
#+END_SRC

*** Api blueprint

#+BEGIN_SRC emacs-lisp
(use-package apib-mode
 :after general
 :config
 (nmap 'apib-mode-map
   :prefix my/leader
   "z p" 'apib-parse           ; Parse the API Blueprint
   "z v" 'apib-validate        ; Validate the API Blueprint
   "z j" 'apib-get-json        ; Print all generated JSON bodies
   "z s" 'apib-get-json-schema ; Print all generated JSON Schemas
   ))
#+END_SRC

*** NASM

#+BEGIN_SRC emacs-lisp
(use-package nasm-mode)
#+END_SRC

*** IASM

#+BEGIN_SRC emacs-lisp
(use-package iasm-mode)
#+END_SRC

*** BNF

#+BEGIN_SRC emacs-lisp
(use-package bnf-mode
 :mode "\\.bnf\\'")
#+END_SRC

*** Ansible

#+BEGIN_SRC emacs-lisp
(use-package ansible)
#+END_SRC

*** Arduino

#+BEGIN_SRC emacs-lisp
(use-package arduino-mode)
#+END_SRC

*** GLSL

#+BEGIN_SRC emacs-lisp
(use-package glsl-mode)
#+END_SRC

** GDB

When gdb debugging, show the many windows (stack trace, break points, etc).

#+BEGIN_SRC emacs-lisp
(use-package gdb-mi
  :ensure nil
  :commands (gdb-many-windows)
  :hook
  (gdb . gdb-many-windows))
#+END_SRC

** DAP

#+BEGIN_SRC emacs-lisp
(use-package dap-mode
 :config
 (dap-mode 1)
 (dap-ui-mode 1))
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
(use-package docker
 :diminish docker-mode
 :config
 (nmap
   :prefix my/leader
   "d" 'docker))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode)
#+END_SRC

** Kubernetes

#+BEGIN_SRC emacs-lisp
(use-package timonier
 :after general
 :init
 (setq timonier-k8s-proxy "http://localhost:8001"))
#+END_SRC

** Hydra
*** Install

Install hydra.

#+BEGIN_SRC emacs-lisp
(use-package hydra
 :after general)
#+END_SRC

*** Text scale

Define hydra for text scaling.

#+BEGIN_SRC emacs-lisp :tangle no
(defhydra hydra-zoom ()
  "zoom"
  ("k" text-scale-increase "in")
  ("j" text-scale-decrease "out"))
#+END_SRC

*** Window management

Define window management hydra.

#+BEGIN_SRC emacs-lisp :tangle no
(defhydra hydra-window ()
  "
Movement^^      ^Split^            ^Resize^
------------------------------------------------
_h_ ←          _v_ertical          _H_ X←
_j_ ↓          _s_ horizontal      _J_ X↓
_k_ ↑          _U_ undo            _K_ X↑
_l_ →          _R_ reset           _L_ X→
_f_ollow       _d_lt Other
_SPC_ cancel   _o_nly this
"
  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)

  ("H" evil-window-increase-width)
  ("J" evil-window-increase-height)
  ("K" evil-window-decrease-height)
  ("L" evil-window-decrease-width)

  ("f" follow-mode)
  ("v"
   (lambda ()
     (interactive)
     (split-window-right)
     (windmove-right))
   )
  ("s"
   (lambda ()
     (interactive)
     (split-window-below)
     (windmove-down))
   )
  ("d" delete-window)
  ("o" delete-other-windows)
  ("i" ace-maximize-window)
  ("U"
   (progn
     (winner-undo)
     (setq this-command 'winner-undo))
   )
  ("R" winner-redo)
  ("SPC" nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(nmap
  "M-t" 'hydra-zoom/body
  "M-w" 'hydra-window/body)
#+END_SRC

** Help

See the [[https://github.com/Wilfred/helpful][package repo]] for more info.

#+BEGIN_SRC emacs-lisp
(use-package helpful
 :config
 (nmap
   :prefix my/leader
   "H h" 'helpful-at-point
   "H f" 'helpful-callable
   "H F" 'helpful-function
   "H v" 'helpful-variable
   "H c" 'helpful-command
   "H k" 'helpful-key))
#+END_SRC

** Infrastructure
*** Net utils

#+BEGIN_SRC emacs-lisp
(use-package net-utils
 :config
 (nmap
   :prefix my/leader
   "n p" 'ping
   "n i" 'ifconfig
   "n w" 'iwconfig
   "n n" 'netstat
   "n a" 'arp
   "n r" 'route
   "n h" 'nslookup-host
   "n d" 'dig
   "n s" 'smbclient))
#+END_SRC

*** IX

#+BEGIN_SRC emacs-lisp
(use-package ix
 :after general
 :config
 (nmap
   :prefix my/leader
   "G i i" 'ix
   "G i b" 'ix-browse
   "G i d" 'ix-delete))
#+END_SRC

** Email

#+BEGIN_SRC emacs-lisp :tangle no
(use-package mu4e
 :ensure nil
 :commands
 (mu4e-html2text-command)
 :hook
 (after-init . mu4e-alert-enable-mode-line-display)
 :init
 (setq
  mu4e-maildir "~/.Mail"
  mu4e-drafts-folder "/vasiliy.yorkin/[Gmail].Drafts"
  mu4e-sent-folder "/vasiliy.yorkin/[Gmail].Sent Mail"
  mu4e-trash-folder "/vasiliy.yorkin/[Gmail].Trash"
  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  mu4e-sent-messages-behavior 'delete
  ;; auto update every minute
  mu4e-update-interval (* 60 5)
  mu4e-headers-auto-update t
  mu4e-headers-date-format "%Y-%m-%d [%H:%M]"
  mu4e-headers-fields
  '((:date . 20)
    (:mailing-list . 14)
    (:from . 20)
    (:subject . nil))
  mu4e-view-fields '(:from :to :cc :subject :date :mailing-list :attachments :signature)
  ;; I was getting duplicate emails, this fixes it
  mu4e-headers-skip-duplicates t
  mu4e-view-show-addresses t
  mu4e-view-show-images t
  mu4e-use-fancy-chars t
  ;; sending
  message-send-mail-function 'message-send-mail-with-sendmail
  sendmail-program "/usr/bin/msmtp"
  user-full-name "Vasiliy Yorkin"
  ;; capturing
  org-mu4e-link-query-in-headers-mode nil
  ;; goobook
  external-abook-command "goobook query '%s' | cut -f 1,2"
  ;; mu4e alert
  mu4e-alert-interesting-mail-query "flag:unread AND NOT flag:trashed AND maildir:/vasiliy.yorkin/INBOX"
  mu4e-attachment-dir  "~/Downloads"
  mu4e-maildir-shortcuts
  '(("/vasiliy.yorkin/INBOX" . ?i)
    ("/vasiliy.yorkin/[Gmail].Sent Mail" . ?s)
    ("/vasiliy.yorkin/[Gmail].Trash" . ?t)
    ("/vasiliy.yorkin/[Gmail].Drafts" . ?d)
    ("/vasiliy.yorkin/[Gmail].All Mail" . ?a))
  mu4e-bookmarks
  '(("flag:unread AND NOT flag:trashed" "Unread messages"  ?u)
    ("date:today..now" "Today's messages" ?t)
    ("date:7d..now" "Last 7 days" ?w)
    ("date:1m..now" "Last month" ?m)
    ("mime:image/*" "Messages with images" ?p)
    (,(mapconcat
       'identity
       (mapcar
        (lambda (maildir)
          (concat "maildir:" (car maildir)))
        mu4e-maildir-shortcuts) " OR ")
     "All inboxes" ?i)))
 :config
 (require 'mu4e-contrib)
 (setq
  ;; mu4e-html2text-command 'mu4e-shr2text
  ;; shr-color-visible-distance-min 5
  ;; shr-use-colors nil
  ;; when using a dark theme the messages are hard to read
  ;; it can help to change the luminosity
  ;; shr-color-visible-luminance-min 80
  ;; textutil is an alternative to html2text for macOS
  ;; mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout"
  mu4e-html2text-command "html2text -b 72")
 (advice-add 'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore)))
 (nmap
   :prefix my/leader
   "M" 'mu4e))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package external-abook
 :after (quelpa)
 :quelpa (external-abook :fetcher github :repo "emacsmirror/external-abook"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package mu4e-alert
 :after (mu4e)
 :config
 (mu4e-alert-enable-mode-line-display)
 (mu4e-alert-enable-notifications)
 (mu4e-alert-set-default-style 'notifier))
#+END_SRC

** Translation

This package allows to translate the strings using Google Translate service
directly from Emacs.

#+BEGIN_SRC emacs-lisp
(use-package google-translate
 :after (general)
 :init
 (setq google-translate-default-source-language "en")
 (setq google-translate-default-target-language "ru")
 :config
 (require 'google-translate-default-ui)
 (nmap
  :prefix "C-c"
  "t" 'google-translate-at-point
  "q" 'google-translate-query-translate))
#+END_SRC

** Search
*** Engine mode

#+BEGIN_SRC emacs-lisp
(use-package engine-mode
 :config
 (engine-mode t)
 (engine/set-keymap-prefix (kbd "C-c C-s"))
 (defengine amazon
   "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")
 (defengine duckduckgo
   "https://duckduckgo.com/?q=%s"
   :keybinding "d")
 (defengine github
   "https://github.com/search?ref=simplesearch&q=%s"
   :keybinding "G")
 (defengine google
   "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
   :keybinding "g")
 (defengine google-images
   "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
   :keybinding "i")
 (defengine google-maps
   "http://maps.google.com/maps?q=%s"
   :docstring "Mappin' it up."
   :keybinding "m")
 (defengine project-gutenberg
   "http://www.gutenberg.org/ebooks/search/?query=%s")
 (defengine rfcs
   "http://pretty-rfc.herokuapp.com/search?q=%s")
 (defengine stack-overflow
   "https://stackoverflow.com/search?q=%s"
   :keybinding "s"
   :docstring "Search Stack Overlow")
 (defengine twitter
   "https://twitter.com/search?q=%s"
   :keybinding "t")
 (defengine wikipedia
   "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
   :keybinding "w"
   :docstring "Searchin' the wikis.")
 (defengine pursuit
   "https://pursuit.purescript.org/search?q=%s"
   :keybinding "p")
 (defengine hoogle
   "https://www.haskell.org/hoogle/?hoogle=%s"
   :keybinding "h")
 (defengine hayoo
   "http://hayoo.fh-wedel.de/?query=%s")
 (defengine wiktionary
   "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")
 (defengine wolfram-alpha
   "http://www.wolframalpha.com/input/?i=%s")
 (defengine youtube
   "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
   :keybinding "y"))
#+END_SRC

*** Google this

I use =engine-mode= instead.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package google-this
 :diminish google-this-mode
 :config
 (google-this-mode 1)
 (nmap
   :prefix my/leader
   "G" google-this-mode-submap))
#+END_SRC

** Pomodoro

#+BEGIN_SRC emacs-lisp
(use-package pomidor
 :after general
 :init
 ;; (setq alert-default-style 'mode-line)
 (setq
  alert-default-style
  (if (eq system-type 'darwin) 'osx-notifier 'libnotify))
 ;; use afplay on macOS
 (when (eq system-type 'darwin)
   (setq
    pomidor-play-sound-file
    (lambda (file)
      (start-process
       "my-pomidor-play-sound"
       nil
       "afplay"
       file))))
 (setq
  pomidor-seconds (* 25 60)      ; 25 minutes
  pomidor-break-seconds (* 5 60) ; 5 minutes
  pomidor-sound-tick nil
  pomidor-sound-tack nil)
 :config
 (nmap
   :prefix my/leader
   "x x" 'pomidor
   "x s" 'pomidor-stop
   "x q" 'pomidor-quit
   "x b" 'pomidor-break
   "x r" 'pomidor-reset)
 (nmap 'pomidor-mode-map
   "Q" 'pomidor-quit
   "s" 'pomidor-stop    ; "RET"
   "b" 'pomidor-break   ; "SPC"
   "r" 'pomidor-reset))
#+END_SRC

** Statistics
*** Uptimes

Provides a simple system for tracking and displaying the uptimes of Emacs
sessions.

#+BEGIN_SRC emacs-lisp
(use-package uptimes)
#+END_SRC

*** Keyfreq

Measure how many time you execute commands. The [[http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html][following blog post explains
this in details]].

#+BEGIN_SRC emacs-lisp
(use-package keyfreq
 :commands
 (keyfreq-mode keyfreq-autosave-mode)
 :config
 (keyfreq-mode 1)
 (keyfreq-autosave-mode 1))
#+END_SRC

*** Wakatime

Setup wakatime.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package wakatime-mode
 :init
 (setq
  wakatime-api-key (getenv "WAKATIME_API_KEY")
  wakatime-cli-path "/usr/bin/wakatime")
 :config
 (global-wakatime-mode)
 :diminish wakatime-mode)
#+END_SRC

** Delight

#+BEGIN_SRC emacs-lisp
(use-package delight
 :config
 (delight
  '((emacs-lisp-mode "elisp" :major)
    (ruby-mode "ruby" :major)
    (elixir-mode "ex" elixir)
    (alchemist-mode "al" alchemist)
    (alchemist-hex-mode "alhex" alchemist)
    (alchemist-test-mode "altest" alchemist)
    (rust-mode "rs" rust)
    (purescript-mode "purs" purescript)
    (javascript-mode "js" js)
    (eldoc-mode "eldoc" eldoc)
    (outline-minor-mode "outl" outline)
    ;; (hi-lock-mode "hi" hi-lock)
    (subword-mode "sw" subword))))
#+END_SRC

** Diminish

#+BEGIN_SRC emacs-lisp
(use-package diminish
 :config
 (eval-after-load "purescript-indentation" '(diminish 'purescript-indentation-mode))
 (eval-after-load "dired" '(diminish 'dired-omit-mode))
 (eval-after-load "hideshow" '(diminish 'hs-minor-mode))
 (eval-after-load "eldoc" '(diminish 'eldoc-mode))
 (eval-after-load "hi-lock" '(diminish 'hi-lock-mode)))
#+END_SRC
